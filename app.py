with st.form("behavior_analysis_form"):
            st.markdown("**üìç SITUATION (Ausl√∂ser)**")
            col1, col2 = st.columns(2)
            
            with col1:
                situation_when = st.text_input("Wann?", placeholder="z.B. Heute Morgen, 14:30 Uhr")
                situation_where = st.text_input("Wo?", placeholder="z.B. Im B√ºro, zu Hause")
            
            with col2:
                situation_who = st.text_input("Wer war dabei?", placeholder="z.B. Kollegen, Familie, allein")
                situation_what = st.text_area("Was ist passiert?", placeholder="Beschreibe die konkrete Situation...", height=80)
            
            st.markdown("---")
            st.markdown("**üß† ORGANISMUS-VARIABLEN (Deine Verfassung)**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Aktuelle Tagesform:**")
                mood_scale = st.slider("Stimmung (0-10)", 0, 10, 5, help="0 = sehr schlecht, 10 = sehr gut")
                energy_level = st.selectbox("Energielevel", ["Sehr m√ºde", "Etwas m√ºde", "Normal", "Energetisch", "Sehr energetisch"])
                stress_level = st.selectbox("Stress-Level", ["Entspannt", "Leicht angespannt", "Gestresst", "Sehr gestresst", "√úberw√§ltigt"])
            
            with col2:
                st.markdown("**Grundannahmen/Denkmuster:**")
                belief_patterns = st.multiselect(
                    "Welche Denkmuster waren aktiv?",
                    ["Perfektionismus", "Katastrophisieren", "Schwarz-Wei√ü-Denken", 
                     "Selbstkritik", "Sorgen um andere", "Kontrollbed√ºrfnis",
                     "Versagensangst", "Nicht-gut-genug-sein", "Andere"]
                )
                other_beliefs = st.text_input("Andere Denkmuster:", placeholder="z.B. spezifische Glaubenss√§tze")
            
            st.markdown("---")
            st.markdown("**üß© REAKTIONEN**")
            
            # Gedanken
            st.markdown("**üí≠ Gedanken**")
            thoughts = st.text_area(
                "Welche Gedanken gingen dir durch den Kopf?",
                placeholder="z.B. 'Das schaffe ich nie', 'Was denken die anderen √ºber mich?'",
                height=100
            )
            
            # Gef√ºhle
            st.markdown("**üíô Gef√ºhle**")
            col1, col2 = st.columns(2)
            
            with col1:
                primary_emotions = st.multiselect(
                    "Hauptgef√ºhle:",
                    ["Angst", "Traurigkeit", "Wut", "Freude", "Scham", "Schuld", 
                     "Entt√§uschung", "Frustration", "Hilflosigkeit", "√úberforderung"]
                )
            
            with col2:
                emotion_intensity = st.slider("Intensit√§t der Gef√ºhle (0-100)", 0, 100, 50)
            
            # K√∂rperempfindungen
            st.markdown("**ü´Ä K√∂rperempfindungen**")
            col1, col2 = st.columns(2)
            
            with col1:
                body_sensations = st.multiselect(
                    "K√∂rperliche Reaktionen:",
                    ["Herzklopfen", "Schwitzen", "Zittern", "Bauchschmerzen", "Kopfschmerzen",
                     "Muskelverspannungen", "Atemnot", "Schwindel", "√úbelkeit", "Hitze/K√§lte"]
                )
            
            with col2:
                tension_level = st.slider("K√∂rperliche Anspannung (0-100)", 0, 100, 50)
            
            # Verhalten
            st.markdown("**üé≠ Beobachtbares Verhalten**")
            behavior_description = st.text_area(
                "Was hast du konkret getan? (So dass es jemand filmen k√∂nnte)",
                placeholder="z.B. 'Bin aufgestanden und weggegangen', 'Habe laut geschrien', 'Bin stumm geworden'",
                height=100
            )
            
            st.markdown("---")
            st.markdown("**‚ö° KONSEQUENZEN**")
            
            # Kurzfristige Konsequenzen
            st.markdown("**üîÑ Kurzfristige Konsequenzen (sofort danach)**")
            short_term_consequences = st.text_area(
                "Was passierte unmittelbar nach deinem Verhalten?",
                placeholder="z.B. 'Anspannung lie√ü nach', 'Andere schauten mich an', 'F√ºhlte mich erleichtert'",
                height=80
            )
            
            # Langfristige Folgen
            st.markdown("**üìà Langfristige Folgen (Stunden/Tage sp√§ter)**")
            long_term_consequences = st.text_area(
                "Welche Auswirkungen hatte dein Verhalten langfristig?",
                placeholder="z.B. 'Schuldgef√ºhle', 'Konflikt versch√§rft', 'Problem ungel√∂st', 'Selbstvertrauen gesunken'",
                height=80
            )
            
            # Zus√§tzliche Informationen
            st.markdown("---")
            st.markdown("**üìù Zus√§tzliche Beobachtungen**")
            additional_notes = st.text_area(
                "Weitere wichtige Beobachtungen:",
                placeholder="Alles was dir noch wichtig erscheint...",
                height=60
            )
            
            # Submit Button
            submitted = st.form_submit_button("üíæ Verhaltensanalyse speichern", type="primary")
            
            if submitted:
                if situation_what and thoughts and behavior_description:
                    new_analysis = {
                        "id": len(st.session_state.behavior_analyses) + 1,
                        "timestamp": datetime.datetime.now().isoformat(),
                        "situation": {
                            "when": situation_when,
                            "where": situation_where,
                            "who": situation_who,
                            "what": situation_what
                        },
                        "organism_variables": {
                            "mood_scale": mood_scale,
                            "energy_level": energy_level,
                            "stress_level": stress_level,
                            "belief_patterns": belief_patterns,
                            "other_beliefs": other_beliefs
                        },
                        "reactions": {
                            "thoughts": thoughts,
                            "emotions": primary_emotions,
                            "emotion_intensity": emotion_intensity,
                            "body_sensations": body_sensations,
                            "tension_level": tension_level,
                            "behavior": behavior_description
                        },
                        "consequences": {
                            "short_term": short_term_consequences,
                            "long_term": long_term_consequences
                        },
                        "additional_notes": additional_notes,
                        "analysis_phase": "documented",  # documented -> analyzed -> planned -> trained
                        "helpful_aspects": {},
                        "exit_points": [],
                        "prevention_strategies": "",
                        "repair_strategies": ""
                    }
                    
                    st.session_state.behavior_analyses.append(new_analysis)
                    st.success("üéâ Verhaltensanalyse erfolgreich gespeichert!")
                    st.balloons()
                    
                    # Sofortiges Feedback
                    st.markdown("""
                    <div class="quote-box">
                        <h4>‚ú® Gut gemacht!</h4>
                        <p>Du hast den ersten wichtigen Schritt gemacht: <strong>Bewusstsein schaffen</strong>.</p>
                        <p>Diese Analyse ist jetzt in deinem pers√∂nlichen Archiv gespeichert. 
                        Im n√§chsten Schritt k√∂nnen wir sie gemeinsam analysieren und Ver√§nderungsstrategien entwickeln.</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                else:
                    st.error("‚ö†Ô∏è Bitte f√ºlle mindestens die Felder 'Situation', 'Gedanken' und 'Verhalten' aus.")
    
    with tab2:
        st.markdown("### üìä Meine Verhaltensanalysen")
        st.markdown("*√úbersicht √ºber deine dokumentierten Verhaltensmuster*")
        
        if st.session_state.behavior_analyses:
            # Statistiken
            total_analyses = len(st.session_state.behavior_analyses)
            analyzed_count = len([a for a in st.session_state.behavior_analyses if a.get('analysis_phase') in ['analyzed', 'planned', 'trained']])
            planned_count = len([a for a in st.session_state.behavior_analyses if a.get('analysis_phase') in ['planned', 'trained']])
            trained_count = len([a for a in st.session_state.behavior_analyses if a.get('analysis_phase') == 'trained'])
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("üìù Gesamt", total_analyses)
            col2.metric("üîç Analysiert", analyzed_count)
            col3.metric("üìã Geplant", planned_count)
            col4.metric("üéØ Trainiert", trained_count)
            
            # Fortschrittsbalken
            if total_analyses > 0:
                progress_percentage = (trained_count / total_analyses) * 100
                st.markdown(f"""
                <div class="progress-container">
                    <div class="progress-bar" style="width: {progress_percentage}%"></div>
                </div>
                <p style="text-align: center;">Bearbeitungsfortschritt: {progress_percentage:.1f}%</p>
                """, unsafe_allow_html=True)
            
            st.markdown("---")
            
            # Filter und Sortierung
            col1, col2 = st.columns(2)
            
            with col1:
                filter_phase = st.selectbox(
                    "Nach Phase filtern:",
                    ["Alle", "Dokumentiert", "Analysiert", "Geplant", "Trainiert"]
                )
            
            with col2:
                sort_order = st.selectbox("Sortierung:", ["Neueste zuerst", "√Ñlteste zuerst"])
            
            # Gefilterte Analysen
            filtered_analyses = st.session_state.behavior_analyses.copy()
            
            if filter_phase != "Alle":
                phase_map = {
                    "Dokumentiert": "documented",
                    "Analysiert": "analyzed", 
                    "Geplant": "planned",
                    "Trainiert": "trained"
                }
                filtered_analyses = [a for a in filtered_analyses if a.get('analysis_phase') == phase_map[filter_phase]]
            
            if sort_order == "Neueste zuerst":
                filtered_analyses = sorted(filtered_analyses, key=lambda x: x['timestamp'], reverse=True)
            else:
                filtered_analyses = sorted(filtered_analyses, key=lambda x: x['timestamp'])
            
            # Analysen anzeigen
            st.markdown(f"**üìã {len(filtered_analyses)} Analyse(n) gefunden**")
            
            for i, analysis in enumerate(filtered_analyses):
                timestamp = datetime.datetime.fromisoformat(analysis['timestamp'])
                date_str = timestamp.strftime("%d.%m.%Y %H:%M")
                
                # Status Badge
                phase = analysis.get('analysis_phase', 'documented')
                phase_colors = {
                    'documented': '#74b9ff',
                    'analyzed': '#fdcb6e', 
                    'planned': '#e17055',
                    'trained': '#00b894'
                }
                phase_names = {
                    'documented': 'üìù Dokumentiert',
                    'analyzed': 'üîç Analysiert',
                    'planned': 'üìã Geplant', 
                    'trained': 'üéØ Trainiert'
                }
                
                phase_color = phase_colors.get(phase, '#ddd')
                phase_name = phase_names.get(phase, 'Unbekannt')
                
                with st.expander(f"#{analysis['id']} | {date_str} | {analysis['situation']['what'][:50]}..."):
                    # Status und Aktionen
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.markdown(f"""
                        <div style="background: {phase_color}; color: white; padding: 0.5em 1em; border-radius: 20px; display: inline-block; margin-bottom: 1em;">
                            {phase_name}
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        if st.button(f"üîç Bearbeiten", key=f"edit_{analysis['id']}"):
                            st.session_state.selected_analysis_for_editing = analysis['id']
                            st.info("Wechsle zum 'Analysieren'-Tab um fortzufahren!")
                    
                    # Analyse-Zusammenfassung
                    st.markdown("**üìç Situation:**")
                    st.write(f"‚Ä¢ **Wann:** {analysis['situation']['when']}")
                    st.write(f"‚Ä¢ **Wo:** {analysis['situation']['where']}")
                    st.write(f"‚Ä¢ **Wer:** {analysis['situation']['who']}")
                    st.write(f"‚Ä¢ **Was:** {analysis['situation']['what']}")
                    
                    st.markdown("**üß† Reaktionen:**")
                    st.write(f"‚Ä¢ **Gedanken:** {analysis['reactions']['thoughts'][:100]}...")
                    st.write(f"‚Ä¢ **Gef√ºhle:** {', '.join(analysis['reactions']['emotions'])} (Intensit√§t: {analysis['reactions']['emotion_intensity']}/100)")
                    st.write(f"‚Ä¢ **Verhalten:** {analysis['reactions']['behavior'][:100]}...")
                    
                    # Weitere Details ausklappbar
                    with st.expander("üìä Vollst√§ndige Details"):
                        st.json(analysis)
        
        else:
            st.info("üìù Noch keine Verhaltensanalysen erstellt. Starte mit dem ersten Tab!")
    
    with tab3:
        st.markdown("### üîç Analyse bewerten und Ausstiegspunkte finden")
        st.markdown("*Bewerte deine Reaktionen und finde Ansatzpunkte f√ºr Ver√§nderungen*")
        
        # Analyse zum Bearbeiten ausw√§hlen
        if st.session_state.behavior_analyses:
            # Auswahl der zu analysierenden Verhaltensanalyse
            analysis_options = []
            for analysis in st.session_state.behavior_analyses:
                timestamp = datetime.datetime.fromisoformat(analysis['timestamp'])
                date_str = timestamp.strftime("%d.%m.%Y")
                situation_preview = analysis['situation']['what'][:30] + "..."
                analysis_options.append(f"#{analysis['id']} - {date_str} - {situation_preview}")
            
            selected_analysis_index = st.selectbox(
                "Welche Analyse m√∂chtest du bearbeiten?",
                range(len(analysis_options)),
                format_func=lambda x: analysis_options[x],
                index=0
            )
            
            selected_analysis = st.session_state.behavior_analyses[selected_analysis_index]
            
            st.markdown("---")
            
            # Analyse-Bewertung
            st.markdown(f"**üîç Analysiere: {selected_analysis['situation']['what'][:50]}...**")
            
            # Hilfreich/Weniger hilfreich Bewertung
            st.markdown("**‚úÖ‚ùå Bewerte deine Reaktionen als hilfreich oder weniger hilfreich:**")
            
            rating_categories = {
                "Situation": {
                    "description": "War die Situation vermeidbar oder besser handhabbar?",
                    "content": selected_analysis['situation']['what']
                },
                "Gedanken": {
                    "description": "Waren deine Gedanken hilfreich und realistisch?", 
                    "content": selected_analysis['reactions']['thoughts']
                },
                "Gef√ºhle": {
                    "description": "Waren die Gef√ºhle angemessen f√ºr die Situation?",
                    "content": f"{', '.join(selected_analysis['reactions']['emotions'])} (Intensit√§t: {selected_analysis['reactions']['emotion_intensity']}/100)"
                },
                "Verhalten": {
                    "description": "War dein Verhalten zielf√ºhrend?",
                    "content": selected_analysis['reactions']['behavior']
                },
                "Kurzfristige Folgen": {
                    "description": "Waren die sofortigen Konsequenzen positiv?",
                    "content": selected_analysis['consequences']['short_term']
                },
                "Langfristige Folgen": {
                    "description": "Unterst√ºtzen die langfristigen Folgen deine Ziele?",
                    "content": selected_analysis['consequences']['long_term']
                }
            }
            
            helpful_ratings = {}
            
            for category, info in rating_categories.items():
                st.markdown(f"**{category}:** {info['content'][:100]}...")
                
                col1, col2, col3 = st.columns([2, 1, 1])
                
                with col1:
                    st.caption(info['description'])
                
                with col2:
                    if st.button(f"‚úÖ Hilfreich", key=f"helpful_{category}"):
                        helpful_ratings[category] = "helpful"
                        st.success(f"{category} als hilfreich markiert!")
                
                with col3:
                    if st.button(f"‚ùå Weniger hilfreich", key=f"unhelpful_{category}"):
                        helpful_ratings[category] = "unhelpful"
                        st.warning(f"{category} als weniger hilfreich markiert!")
            
            # Ausstiegspunkte identifizieren
            st.markdown("---")
            st.markdown("**üö™ Ausstiegspunkte identifizieren:**")
            st.markdown("*An welchem Punkt h√§ttest du die Reaktionskette unterbrechen k√∂nnen?*")
            
            exit_points = []
            
            exit_options = {
                "üîî Fr√ºhwarnung": "Situation fr√ºher erkennen und vermeiden",
                "üß† Gedanken stoppen": "Automatische Gedanken unterbrechen",
                "üíô Gef√ºhle regulieren": "Emotionsregulationstechniken anwenden", 
                "ü´Ä K√∂rper beruhigen": "K√∂rperliche Anspannung reduzieren",
                "üé≠ Verhalten √§ndern": "Alternative Verhaltensweise w√§hlen",
                "‚è∏Ô∏è Pause einlegen": "Kurz innehalten vor der Reaktion"
            }
            
            st.markdown("**M√∂gliche Ausstiegspunkte:**")
            
            for exit_key, exit_description in exit_options.items():
                if st.checkbox(f"{exit_key} {exit_description}", key=f"exit_{exit_key}"):
                    exit_points.append(exit_key)
                    
                    # Konkrete Strategie erfragen
                    strategy = st.text_input(
                        f"Was w√ºrdest du konkret anders machen? ({exit_key})",
                        key=f"strategy_{exit_key}",
                        placeholder="Beschreibe deine alternative Reaktion..."
                    )
                    
                    if strategy:
                        helpful_ratings[f"strategy_{exit_key}"] = strategy
            
            # Pr√§vention und Wiedergutmachung
            st.markdown("---")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üõ°Ô∏è Pr√§vention:**")
                prevention_strategies = st.text_area(
                    "Wie k√∂nntest du dich auf √§hnliche Situationen vorbereiten?",
                    placeholder="z.B. Entspannungs√ºbungen lernen, Situation vorab besprechen...",
                    height=100
                )
            
            with col2:
                st.markdown("**üîß Wiedergutmachung:**")
                repair_strategies = st.text_area(
                    "Was k√∂nntest du tun, um die aktuelle Situation zu verbessern?",
                    placeholder="z.B. Entschuldigung, Gespr√§ch f√ºhren, sich selbst etwas Gutes tun...",
                    height=100
                )
            
            # Analyse speichern
            if st.button("üíæ Analyse-Ergebnisse speichern", type="primary"):
                # Update der ausgew√§hlten Analyse
                selected_analysis['helpful_aspects'] = helpful_ratings
                selected_analysis['exit_points'] = exit_points
                selected_analysis['prevention_strategies'] = prevention_strategies
                selected_analysis['repair_strategies'] = repair_strategies
                selected_analysis['analysis_phase'] = 'analyzed'
                
                # Speichern in Session State
                st.session_state.behavior_analyses[selected_analysis_index] = selected_analysis
                
                st.success("üéâ Analyse-Bewertung gespeichert!")
                st.balloons()
                
                # Feedback geben
                unhelpful_count = len([v for v in helpful_ratings.values() if v == "unhelpful"])
                exit_count = len(exit_points)
                
                st.markdown(f"""
                <div class="quote-box">
                    <h4>üìä Deine Analyse-Zusammenfassung:</h4>
                    <p>‚Ä¢ <strong>{unhelpful_count}</strong> Aspekte als "weniger hilfreich" identifiziert</p>
                    <p>‚Ä¢ <strong>{exit_count}</strong> m√∂gliche Ausstiegspunkte gefunden</p>
                    <p>‚Ä¢ Pr√§ventionsstrategien entwickelt: {"‚úÖ" if prevention_strategies else "‚ùå"}</p>
                    <p>‚Ä¢ Wiedergutmachung geplant: {"‚úÖ" if repair_strategies else "‚ùå"}</p>
                    <br>
                    <p><strong>N√§chster Schritt:</strong> Gehe zum "Planen"-Tab um alternative Reaktionen zu entwickeln!</p>
                </div>
                """, unsafe_allow_html=True)
        
        else:
            st.info("üìù Erstelle erst eine Verhaltensanalyse im ersten Tab!")
    
    with tab4:
        st.markdown("### üìã Alternative Reaktionen planen")
        st.markdown("*Entwickle neue, hilfreichere Verhaltensweisen*")
        
        # Analysierte Analysen zur Auswahl
        analyzed_analyses = [a for a in st.session_state.behavior_analyses if a.get('analysis_phase') in ['analyzed', 'planned', 'trained']]
        
        if analyzed_analyses:
            # Auswahl der zu planenden Analyse
            planning_options = []
            for analysis in analyzed_analyses:
                timestamp = datetime.datetime.fromisoformat(analysis['timestamp'])
                date_str = timestamp.strftime("%d.%m.%Y")
                situation_preview = analysis['situation']['what'][:30] + "..."
                planning_options.append(f"#{analysis['id']} - {date_str} - {situation_preview}")
            
            selected_planning_index = st.selectbox(
                "F√ºr welche Analyse m√∂chtest du Alternativen planen?",
                range(len(planning_options)),
                format_func=lambda x: planning_options[x]
            )
            
            selected_analysis = analyzed_analyses[selected_planning_index]
            
            st.markdown("---")
            
            # Planning Interface
            st.markdown(f"**üìã Plane Alternativen f√ºr: {selected_analysis['situation']['what'][:50]}...**")
            
            # Zeige identifizierte Ausstiegspunkte
            if selected_analysis.get('exit_points'):
                st.markdown("**üö™ Deine identifizierten Ausstiegspunkte:**")
                for exit_point in selected_analysis['exit_points']:
                    st.markdown(f"‚Ä¢ {exit_point}")
            
            st.markdown("---")
            st.markdown("**üîÑ Entwirf eine alternative Reaktionskette:**")
            st.markdown("*Beginne an deinem gew√§hlten Ausstiegspunkt und beschreibe, was du anders machen w√ºrdest*")
            
            # Alternative Reaktionskette planen
            with st.form("alternative_planning_form"):
                st.markdown("**üìç Situationsver√§nderung (falls m√∂glich):**")
                alt_situation = st.text_area(
                    "K√∂nntest du die ausl√∂sende Situation ver√§ndern oder fr√ºher erkennen?",
                    value=selected_analysis['situation']['what'],
                    height=80
                )
                
                st.markdown("**üß† Alternative Gedanken:**")
                alt_thoughts = st.text_area(
                    "Welche hilfreichen Gedanken k√∂nntest du stattdessen denken?",
                    placeholder="z.B. 'Ich kann das Schritt f√ºr Schritt angehen', 'Das ist eine Herausforderung, aber machbar'",
                    height=100
                )
                
                st.markdown("**üíô Erwartete Gef√ºhle:**")
                col1, col2 = st.columns(2)
                
                with col1:
                    alt_emotions = st.multiselect(
                        "Welche Gef√ºhle w√ºrden die neuen Gedanken ausl√∂sen?",
                        ["Ruhe", "Zuversicht", "Konzentration", "Entschlossenheit", 
                         "Gelassenheit", "Motivation", "Klarheit", "Selbstvertrauen"]
                    )
                
                with col2:
                    alt_emotion_intensity = st.slider(
                        "Erwartete Intensit√§t (0-100):",
                        0, 100, 30,
                        help="Oft sind alternative Emotionen weniger intensiv"
                    )
                
                st.markdown("**ü´Ä K√∂rperliche Ver√§nderungen:**")
                alt_body_sensations = st.multiselect(
                    "Welche k√∂rperlichen Ver√§nderungen erwartest du?",
                    ["Entspannte Muskeln", "Ruhiger Atem", "Normaler Herzschlag", 
                     "Weniger Anspannung", "Ausgeglichenheit", "Mehr Energie"]
                )
                
                alt_tension_level = st.slider("Erwartete Anspannung (0-100):", 0, 100, 20)
                
                st.markdown("**üé≠ Alternatives Verhalten:**")
                alt_behavior = st.text_area(
                    "Was w√ºrdest du konkret anders machen?",
                    placeholder="Beschreibe dein neues Verhalten so konkret wie m√∂glich...",
                    height=120
                )
                
                st.markdown("**‚ö° Erwartete Konsequenzen:**")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    alt_short_consequences = st.text_area(
                        "Kurzfristige Folgen des neuen Verhaltens:",
                        placeholder="Was w√ºrde sofort passieren?",
                        height=80
                    )
                
                with col2:
                    alt_long_consequences = st.text_area(
                        "Langfristige Folgen des neuen Verhaltens:",
                        placeholder="Wie w√ºrde sich das langfristig auswirken?",
                        height=80
                    )
                
                st.markdown("**üéØ Umsetzungsplanung:**")
                
                implementation_plan = st.text_area(
                    "Wie willst du diese Alternativen konkret √ºben/umsetzen?",
                    placeholder="z.B. 'Ich werde t√§glich 5 Min die neuen Gedanken √ºben', 'Beim n√§chsten Mal atme ich erst tief durch'",
                    height=80
                )
                
                success_criteria = st.text_input(
                    "Woran erkennst du, dass es funktioniert hat?",
                    placeholder="z.B. 'Ich bleibe ruhiger', 'Das Gespr√§ch verl√§uft besser'"
                )
                
                # Submit Planning
                planning_submitted = st.form_submit_button("üíæ Alternative Reaktionskette speichern", type="primary")
                
                if planning_submitted and alt_thoughts and alt_behavior:
                    # Finde die urspr√ºngliche Analyse und aktualisiere sie
                    original_index = next(i for i, a in enumerate(st.session_state.behavior_analyses) if a['id'] == selected_analysis['id'])
                    
                    # Speichere die geplanten Alternativen
                    st.session_state.behavior_analyses[original_index]['planned_alternatives'] = {
                        "situation": alt_situation,
                        "thoughts": alt_thoughts,
                        "emotions": alt_emotions,
                        "emotion_intensity": alt_emotion_intensity,
                        "body_sensations": alt_body_sensations,
                        "tension_level": alt_tension_level,
                        "behavior": alt_behavior,
                        "short_consequences": alt_short_consequences,
                        "long_consequences": alt_long_consequences,
                        "implementation_plan": implementation_plan,
                        "success_criteria": success_criteria
                    }
                    
                    st.session_state.behavior_analyses[original_index]['analysis_phase'] = 'planned'
                    
                    st.success("üéâ Alternative Reaktionskette geplant!")
                    st.balloons()
                    
                    st.markdown(f"""
                    <div class="quote-box">
                        <h4>üéØ Dein Ver√§nderungsplan ist bereit!</h4>
                        <p><strong>Neue Gedanken:</strong> {alt_thoughts[:100]}...</p>
                        <p><strong>Neues Verhalten:</strong> {alt_behavior[:100]}...</p>        else:
            # Denkfallen-√úbersicht ohne konkreten Gedanken
            st.markdown("**üéì Lerne die h√§ufigsten Denkfallen kennen:**")
            
            for distortion_name, distortion_info in cognitive_distortions.items():
                with st.expander(f"{distortion_name} - {distortion_info['description']}"):
                    st.markdown(f"**Beispiel:** {distortion_info['example']}")
                    st.markdown(f"**Gegenmittel:** {distortion_info['counter']}")
                    st.markdown("**Hilfreiche Fragen:**")
                    for question in distortion_info['questions']:
                        st.markdown(f"‚Ä¢ {question}")
    
    with tab3:
        st.markdown("### üí≠ Gedanken-Protokoll")
        st.markdown("*Dokumentiere deine automatischen Gedanken √ºber den Tag*")
        
        if "thought_log" not in st.session_state:
            st.session_state.thought_log = []
        
        # Neuen Gedanken hinzuf√ºgen
        st.markdown("**üìù Gedanken-Eintrag erstellen:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            thought_situation = st.text_input("In welcher Situation?", placeholder="z.B. 'Meeting mit Chef'")
            automatic_thought = st.text_area("Automatischer Gedanke:", placeholder="z.B. 'Das wird bestimmt schlecht laufen'")
            thought_emotion = st.selectbox("Resultierende Emotion:", 
                                         ["üò∞ Angst", "üò¢ Traurigkeit", "üò° Wut", "üòñ Frustration", "üòî Hoffnungslosigkeit"])
        
        with col2:
            emotion_intensity = st.slider("Emotionsintensit√§t (1-10):", 1, 10, 5)
            belief_in_thought = st.slider("Wie sehr glaubst du dem Gedanken? (0-100%):", 0, 100, 70)
            
            # Denkfallen-Check f√ºr diesen Gedanken
            potential_distortions = st.multiselect(
                "Welche Denkfallen erkennst du?",
                list(cognitive_distortions.keys())
            )
        
        # Alternative Gedanken entwickeln
        st.markdown("**üîÑ Alternative Sichtweisen:**")
        alternative_thought = st.text_area("Ausgewogenerer Gedanke:", placeholder="z.B. 'Ich habe mich gut vorbereitet und gebe mein Bestes'")
        
        if st.button("üíæ Gedanken-Protokoll speichern") and automatic_thought:
            thought_entry = {
                "timestamp": datetime.datetime.now().isoformat(),
                "situation": thought_situation,
                "automatic_thought": automatic_thought,
                "emotion": thought_emotion,
                "emotion_intensity": emotion_intensity,
                "belief_percentage": belief_in_thought,
                "distortions": potential_distortions,
                "alternative_thought": alternative_thought,
                "id": len(st.session_state.thought_log) + 1
            }
            st.session_state.thought_log.append(thought_entry)
            st.success("üß† Gedanken-Protokoll gespeichert! Bewusstsein ist der erste Schritt zur Ver√§nderung.")
        
        # Gedanken-Log anzeigen
        if st.session_state.thought_log:
            st.markdown("---")
            st.markdown("**üìö Deine letzten Gedanken-Protokolle:**")
            
            for entry in reversed(st.session_state.thought_log[-5:]):
                timestamp = datetime.datetime.fromisoformat(entry["timestamp"])
                time_str = timestamp.strftime("%d.%m.%Y %H:%M")
                
                st.markdown(f"""
                <div class="diary-entry">
                    <strong>{time_str}</strong> | {entry['emotion']} ({entry['emotion_intensity']}/10)<br>
                    <strong>Situation:</strong> {entry['situation']}<br>
                    <strong>Automatischer Gedanke:</strong> "{entry['automatic_thought']}" (Glaube: {entry['belief_percentage']}%)<br>
                    {f"<strong>Erkannte Denkfallen:</strong> {', '.join(entry['distortions'])}<br>" if entry['distortions'] else ""}
                    {f"<strong>Alternative:</strong> \"{entry['alternative_thought']}\"" if entry['alternative_thought'] else ""}
                </div>
                """, unsafe_allow_html=True)
    
    with tab4:
        st.markdown("### üéØ Realit√§ts-Check Station")
        st.markdown("*√úberpr√ºfe deine Gedanken auf Wahrheitsgehalt*")
        
        if current_thought:
            st.markdown(f"**üîç Realit√§ts-Check f√ºr:** '{current_thought}'")
            
            # Strukturierter Realit√§ts-Check
            reality_checks = {
                "Fakten vs. Meinungen": {
                    "question": "Was davon sind Fakten, was sind Interpretationen?",
                    "prompt": "Trenne objektive Beobachtungen von subjektiven Bewertungen"
                },
                "Worst-Case-Analyse": {
                    "question": "Was ist das Schlimmste, was realistisch passieren k√∂nnte?",
                    "prompt": "Ist es wirklich so katastrophal? W√ºrdest du √ºberleben?"
                },
                "Wahrscheinlichkeits-Check": {
                    "question": "Wie wahrscheinlich ist es wirklich (0-100%)?",
                    "prompt": "Basierend auf Erfahrung und Logik, nicht auf Gef√ºhlen"
                },
                "Beweise sammeln": {
                    "question": "Welche Beweise sprechen DAF√úR und DAGEGEN?",
                    "prompt": "Sammle objektive Belege f√ºr beide Seiten"
                },
                "Freund-Perspektive": {
                    "question": "Was w√ºrdest du einem guten Freund in derselben Lage sagen?",
                    "prompt": "Oft sind wir zu anderen mitf√ºhlender als zu uns selbst"
                },
                "10-Jahre-Test": {
                    "question": "Wird das in 10 Jahren noch wichtig sein?",
                    "prompt": "Langfristige Perspektive hilft bei der Einordnung"
                }
            }
            
            for check_name, check_info in reality_checks.items():
                with st.expander(f"üîç {check_name}"):
                    st.markdown(f"**{check_info['question']}**")
                    st.caption(check_info['prompt'])
                    
                    response = st.text_area(f"Deine Antwort:", key=f"reality_{check_name}", height=80)
                    
                    if response:
                        if check_name == "Wahrscheinlichkeits-Check":
                            try:
                                percentage = int(''.join(filter(str.isdigit, response)))
                                if percentage < 30:
                                    st.success("üí° Das ist ziemlich unwahrscheinlich! Vielleicht machst du dir unn√∂tig Sorgen?")
                                elif percentage > 70:
                                    st.info("üéØ Das scheint wahrscheinlich. Lass uns Bew√§ltigungsstrategien entwickeln!")
                                else:
                                    st.info("‚öñÔ∏è Moderates Risiko. Bereite dich vor, aber panik nicht!")
                            except:
                                st.info("üí≠ Interessante Einsch√§tzung!")
                        else:
                            st.info(f"‚úÖ Notiert: {response[:100]}{'...' if len(response) > 100 else ''}")
            
            # Zusammenfassung nach Realit√§ts-Check
            if st.button("üìä Realit√§ts-Check Zusammenfassung"):
                st.markdown(f"""
                <div class="quote-box">
                    <h4>üéØ Dein Realit√§ts-Check Ergebnis</h4>
                    <p><strong>Urspr√ºnglicher Gedanke:</strong> "{current_thought}"</p>
                    <p><strong>Nach dem Check:</strong> Du hast verschiedene Perspektiven betrachtet und Beweise gesammelt.</p>
                    <p><strong>Neuer Blickwinkel:</strong> Gedanken sind nicht automatisch Wahrheiten. Du kannst sie hinterfragen!</p>
                    <p><strong>N√§chster Schritt:</strong> Entwickle einen ausgewogeneren Alternativ-Gedanken.</p>
                </div>
                """, unsafe_allow_html=True)
        
        else:
            st.info("üí≠ Gib oben im ersten Tab einen Gedanken ein, um den Realit√§ts-Check zu nutzen!")

def handle_parts_module():
    """Erweiterte innere Anteile Arbeit"""
    
    tab1, tab2, tab3, tab4 = st.tabs(["üé≠ Anteil kennenlernen", "üí¨ Innerer Dialog", "üó∫Ô∏è Anteile-Mapping", "ü§ù Integration"])
    
    with tab1:
        st.markdown("### üé≠ Wer meldet sich heute zu Wort?")
        st.markdown("*Lerne deine inneren Stimmen kennen*")
        
        # Erweiterte Anteile-Galerie
        parts_gallery = {
            "üë®‚Äçüíº Der Perfektionist": {
                "description": "Will alles perfect machen",
                "typical_thoughts": ["Das ist nicht gut genug!", "Was werden die anderen denken?", "Ich muss es besser machen!"],
                "positive_function": "Sorgt f√ºr Qualit√§t und hohe Standards",
                "shadow_side": "Kann zu Selbstkritik und Prokrastination f√ºhren",
                "color": "#e74c3c"
            },
            "üò∞ Der √Ñngstliche": {
                "description": "Warnt vor Gefahren",
                "typical_thoughts": ["Was wenn etwas schief geht?", "Das ist zu riskant!", "Ich bin nicht sicher..."],
                "positive_function": "Besch√ºtzt vor echten Gefahren",
                "shadow_side": "Kann √ºbervorsichtig machen und Wachstum verhindern",
                "color": "#f39c12"
            },
            "üé® Der Kreative": {
                "description": "Sucht nach Inspiration und Sch√∂nheit",
                "typical_thoughts": ["Das k√∂nnte interessant sein!", "Lass uns was Neues ausprobieren!", "Wie w√§re es wenn..."],
                "positive_function": "Bringt Freude und Innovation ins Leben",
                "shadow_side": "Kann impulsiv sein und praktische Dinge vernachl√§ssigen",
                "color": "#9b59b6"
            },
            "üò° Der W√ºtende": {
                "description": "K√§mpft f√ºr Gerechtigkeit und Grenzen",
                "typical_thoughts": ["Das ist unfair!", "So lasse ich nicht mit mir umgehen!", "Das reicht!"],
                "positive_function": "Setzt Grenzen und k√§mpft f√ºr Werte",
                "shadow_side": "Kann verletzend sein und Beziehungen sch√§digen",
                "color": "#c0392b"
            },
            "üõ°Ô∏è Der Besch√ºtzer": {
                "description": "Sorgt f√ºr Sicherheit und √úberleben",
                "typical_thoughts": ["Ich muss aufpassen", "Vertraue niemandem", "Ich schaffe das allein"],
                "positive_function": "H√§lt uns sicher und unabh√§ngig",
                "shadow_side": "Kann zu Isolation und Misstrauen f√ºhren",
                "color": "#34495e"
            },
            "üë∂ Das innere Kind": {
                "description": "Will Spa√ü, Liebe und Anerkennung",
                "typical_thoughts": ["Das macht Spa√ü!", "Lieb mich!", "Ich will das JETZT!"],
                "positive_function": "Bringt Spontaneit√§t und Lebensfreude",
                "shadow_side": "Kann unreife Entscheidungen treffen",
                "color": "#f1c40f"
            },
            "üßô‚Äç‚ôÄÔ∏è Der Weise": {
                "description": "Sieht das gr√∂√üere Bild",
                "typical_thoughts": ["Das wird auch vor√ºbergehen", "Was kann ich daraus lernen?", "Alles hat seinen Grund"],
                "positive_function": "Gibt Perspektive und tiefere Einsichten",
                "shadow_side": "Kann zu passiv oder abgehoben wirken",
                "color": "#2ecc71"
            },
            "üí™ Der Macher": {
                "description": "Will Dinge erledigen und Ziele erreichen",
                "typical_thoughts": ["Lass uns anfangen!", "Das schaffen wir!", "Weitermachen!"],
                "positive_function": "Sorgt f√ºr Produktivit√§t und Zielerreichung",
                "shadow_side": "Kann √ºberarbeitung und Burnout verursachen",
                "color": "#3498db"
            }
        }
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("**üë• W√§hle einen Anteil:**")
            selected_part = None
            
            for part_name in parts_gallery.keys():
                if st.button(part_name, key=f"part_select_{part_name}"):
                    selected_part = part_name
                    st.session_state.selected_part = part_name
                    st.session_state.selected_part_data = parts_gallery[part_name]
        
        with col2:
            if hasattr(st.session_state, 'selected_part_data'):
                part_data = st.session_state.selected_part_data
                part_name = st.session_state.selected_part
                
                st.markdown(f"""
                <div style="background: {part_data['color']}; color: white; padding: 2em; border-radius: 20px; margin: 1em 0;">
                    <h3>{part_name}</h3>
                    <p><strong>Rolle:</strong> {part_data['description']}</p>
                    <p><strong>Positive Funktion:</strong> {part_data['positive_function']}</p>
                    <p><strong>Schattenseite:</strong> {part_data['shadow_side']}</p>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown("**üí≠ Typische Gedanken dieses Anteils:**")
                for thought in part_data['typical_thoughts']:
                    st.markdown(f"‚Ä¢ *\"{thought}\"*")
                
                # Anteil-spezifische Fragen
                st.markdown("---")
                st.markdown(f"**ü§î Fragen an {part_name}:**")
                
                anteil_questions = {
                    "Wann meldest du dich": "In welchen Situationen wirst du besonders aktiv?",
                    "Was brauchst du": "Was brauchst du von mir, um dich sicher zu f√ºhlen?",
                    "Was ist deine Angst": "Wovor hast du am meisten Angst?",
                    "Wie kann ich dir helfen": "Wie kann ich besser mit dir zusammenarbeiten?"
                }
                
                for q_key, question in anteil_questions.items():
                    response = st.text_area(question, key=f"part_q_{q_key}", height=60)
                    if response:
                        st.info(f"üí≠ Antwort notiert: {response[:80]}{'...' if len(response) > 80 else ''}")
    
    with tab2:
        st.markdown("### üí¨ Innerer Dialog f√ºhren")
        st.markdown("*Moderiere ein Gespr√§ch zwischen deinen Anteilen*")
        
        if "inner_dialogues" not in st.session_state:
            st.session_state.inner_dialogues = []
        
        # Dialog-Setup
        st.markdown("**üé¨ Dialog-Setup:**")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            part_a = st.selectbox("Erster Gespr√§chspartner:", list(parts_gallery.keys()), key="dialog_part_a")
        
        with col2:
            part_b = st.selectbox("Zweiter Gespr√§chspartner:", list(parts_gallery.keys()), key="dialog_part_b")
        
        with col3:
            dialog_topic = st.text_input("Gespr√§chsthema:", placeholder="z.B. 'Jobwechsel', 'Beziehung'")
        
        if part_a != part_b and dialog_topic:
            st.markdown(f"**üé≠ Dialog zwischen {part_a} und {part_b} √ºber: '{dialog_topic}'**")
            
            # Dialog-Interface
            current_speaker = st.radio("Wer spricht gerade?", [part_a, part_b])
            
            message = st.text_area(f"Was sagt {current_speaker}?", height=80, placeholder=f"Schreib aus der Perspektive von {current_speaker}...")
            
            if st.button("üí¨ Nachricht senden") and message:
                dialog_entry = {
                    "timestamp": datetime.datetime.now().isoformat(),
                    "topic": dialog_topic,
                    "speaker": current_speaker,
                    "message": message,
                    "participants": [part_a, part_b]
                }
                st.session_state.inner_dialogues.append(dialog_entry)
                st.success(f"üí≠ {current_speaker} hat gesprochen!")
            
            # Dialog-Verlauf anzeigen
            if st.session_state.inner_dialogues:
                current_topic_dialogues = [d for d in st.session_state.inner_dialogues if d['topic'] == dialog_topic]
                
                if current_topic_dialogues:
                    st.markdown("---")
                    st.markdown("**üí¨ Dialog-Verlauf:**")
                    
                    for entry in current_topic_dialogues[-10:]:  # Letzte 10 Nachrichten
                        speaker_color = parts_gallery[entry['speaker']]['color']
                        timestamp = datetime.datetime.fromisoformat(entry['timestamp'])
                        time_str = timestamp.strftime("%H:%M")
                        
                        st.markdown(f"""
                        <div style="background: {speaker_color}; color: white; padding: 1em; border-radius: 15px; margin: 0.5em 0;">
                            <strong>{entry['speaker']} ({time_str}):</strong><br>
                            "{entry['message']}"
                        </div>
                        """, unsafe_allow_html=True)
            
            # Dialog-Moderation
            st.markdown("---")
            st.markdown("**üßò‚Äç‚ôÄÔ∏è Dialog-Moderation:**")
            
            moderation_tools = {
                "Zusammenfassung": "Was haben beide Anteile gesagt? Wo sind sie sich einig?",
                "Kompromiss finden": "Wie k√∂nnen beide Anteile ihre Bed√ºrfnisse erf√ºllen?",
                "Gemeinsames Ziel": "Wof√ºr arbeiten beide Anteile letztendlich?",
                "Wertsch√§tzung": "Was kann jeder Anteil vom anderen lernen?"
            }
            
            for tool_name, tool_question in moderation_tools.items():
                if st.button(f"ü§ù {tool_name}"):
                    st.info(f"**Moderations-Frage:** {tool_question}")
    
    with tab3:
        st.markdown("### üó∫Ô∏è Deine innere Landkarte")
        st.markdown("*Visualisiere dein inneres Team*")
        
        # Anteile-St√§rke Assessment
        st.markdown("**üìä Wie stark sind deine Anteile gerade?**")
        
        if "parts_strength" not in st.session_state:
            st.session_state.parts_strength = {}
        
        parts_strength_data = {}
        
        for part_name, part_data in parts_gallery.items():
            strength = st.slider(
                f"{part_name}",
                0, 10, 
                st.session_state.parts_strength.get(part_name, 5),
                help=f"{part_data['description']}"
            )
            parts_strength_data[part_name] = strength
            st.session_state.parts_strength[part_name] = strength
        
        # Visualisierung der Anteile-St√§rken
        st.markdown("---")
        st.markdown("**üé® Deine aktuelle Anteile-Konstellation:**")
        
        # Erstelle eine visuelle Darstellung
        for part_name, strength in parts_strength_data.items():
            part_data = parts_gallery[part_name]
            width_percent = (strength / 10) * 100
            
            st.markdown(f"""
            <div style="margin: 0.5em 0;">
                <div style="display: flex; align-items: center; margin-bottom: 0.2em;">
                    <span style="width: 200px;">{part_name}</span>
                    <span style="margin-left: 1em; font-weight: bold;">{strength}/10</span>
                </div>
                <div style="background: #e0e0e0; height: 20px; border-radius: 10px; overflow: hidden;">
                    <div style="background: {part_data['color']}; height: 100%; width: {width_percent}%; border-radius: 10px; transition: width 0.3s ease;"></div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Anteile-Balance Analyse
        st.markdown("---")
        st.markdown("**‚öñÔ∏è Balance-Analyse:**")
        
        strongest_parts = sorted(parts_strength_data.items(), key=lambda x: x[1], reverse=True)[:3]
        weakest_parts = sorted(parts_strength_data.items(), key=lambda x: x[1])[:3]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üî• St√§rkste Anteile:**")
            for part, strength in strongest_parts:
                st.markdown(f"‚Ä¢ {part}: {strength}/10")
        
        with col2:
            st.markdown("**üí§ Leiseste Anteile:**")
            for part, strength in weakest_parts:
                st.markdown(f"‚Ä¢ {part}: {strength}/10")
        
        # Balance-Tipps
        if strongest_parts[0][1] >= 8:
            strong_part = strongest_parts[0][0]
            st.warning(f"‚ö†Ô∏è {strong_part} ist sehr dominant. Achte darauf, dass andere Anteile auch Raum bekommen!")
        
        if weakest_parts[0][1] <= 2:
            weak_part = weakest_parts[0][0]
            st.info(f"üí° {weak_part} ist sehr leise. Vielleicht braucht dieser Anteil mehr Aufmerksamkeit?")
    
    with tab4:
        st.markdown("### ü§ù Anteile-Integration")
        st.markdown("*Arbeite mit deinen Anteilen als Team*")
        
        # Integration-√úbungen
        st.markdown("**üéØ Integration-√úbungen:**")
        
        integration_exercises = {
            "Anteile-Meeting": {
                "description": "F√ºhre ein imagin√§res Team-Meeting mit deinen Anteilen",
                "steps": [
                    "1. Stelle dir vor, alle Anteile sitzen an einem Tisch",
                    "2. Lass jeden Anteil zu Wort kommen",
                    "3. H√∂re ihre Sorgen und W√ºnsche",
                    "4. Finde gemeinsame Ziele",
                    "5. Vereinbare, wie ihr zusammenarbeiten wollt"
                ]
            },
            "Anteile-Dankbarkeit": {
                "description": "W√ºrdige die positive Funktion jedes Anteils",
                "steps": [
                    "1. W√§hle einen Anteil aus",
                    "2. Erkenne seine positive Absicht",
                    "3. Danke ihm f√ºr seinen Schutz/seine Hilfe",
                    "4. Erkl√§re, wie er dir geholfen hat",
                    "5. Bitte ihn, weiter f√ºr dich da zu sein"
                ]
            },
            "Anteile-Verhandlung": {
                "description": "Vermittle zwischen konfligierenden Anteilen",
                "steps": [
                    "1. Identifiziere zwei konflikthafte Anteile",
                    "2. Verstehe die Bed√ºrfnisse beider",
                    "3. Suche nach Gemeinsamkeiten",
                    "4. Entwickle einen Kompromiss",
                    "5. Teste die L√∂sung in deiner Vorstellung"
                ]
            }
        }
        
        selected_exercise = st.selectbox("W√§hle eine √úbung:", list(integration_exercises.keys()))
        
        if selected_exercise:
            exercise_info = integration_exercises[selected_exercise]
            
            st.markdown(f"**üéØ {selected_exercise}**")
            st.markdown(f"*{exercise_info['description']}*")
            
            st.markdown("**üìã Schritte:**")
            for step in exercise_info['steps']:
                st.markdown(step)
            
            # Reflexions-Bereich f√ºr die √úbung
            st.markdown("---")
            st.markdown("**üìù Deine Erfahrung mit der √úbung:**")
            
            exercise_reflection = st.text_area(
                "Was hast du bei der √úbung erlebt?",
                height=120,
                placeholder="Beschreibe deine Erfahrung, Erkenntnisse oder Schwierigkeiten..."
            )
            
            if exercise_reflection and st.button("üíæ Erfahrung speichern"):
                if "integration_experiences" not in st.session_state:
                    st.session_state.integration_experiences = []
                
                experience_entry = {
                    "timestamp": datetime.datetime.now().isoformat(),
                    "exercise": selected_exercise,
                    "reflection": exercise_reflection
                }
                st.session_state.integration_experiences.append(experience_entry)
                st.success("üåü Integration-Erfahrung gespeichert!")
        
        # Anteile-Weisheiten
        st.markdown("---")
        st.markdown("**üíé Anteile-Weisheiten:**")
        
        wisdom_quotes = [
            "Jeder Anteil in dir hat eine positive Absicht, auch wenn sie manchmal verborgen ist.",
            "Integration bedeutet nicht, Anteile zu eliminieren, sondern sie zu verstehen und zu w√ºrdigen.",
            "Deine vermeintlichen 'Schw√§chen' sind oft Anteile, die Schutz und Anerkennung brauchen.",
            "Ein inneres Team funktioniert wie ein √§u√üeres: Kommunikation ist der Schl√ºssel.",
            "Selbstmitgef√ºhl bedeutet, mit allen deinen Anteilen freundlich zu sein."
        ]
        
        if st.button("üé≤ Zuf√§llige Anteile-Weisheit"):
            wisdom = random.choice(wisdom_quotes)
            st.markdown(f"""
            <div class="quote-box">
                <h4>üíé Weisheit f√ºr heute:</h4>
                <p>"{wisdom}"</p>
            </div>
            """, unsafe_allow_html=True)

# Verhaltensanalyse-Modul (NEU!)
def handle_behavior_analysis_module():
    """Professionelle Verhaltensanalyse basierend auf SORKC-Modell"""
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìù Neue Analyse", "üìä Meine Analysen", "üîç Analysieren", "üìã Planen", "üéØ Trainieren"])
    
    with tab1:
        st.markdown("### üìù Verhaltensanalyse erstellen")
        st.markdown("*Verstehe deine Reaktionsmuster mit der professionellen SORKC-Methode*")
        
        # Einleitung zur Verhaltensanalyse
        st.markdown("""
        <div class="info-box">
            <h4>üß† Was ist eine Verhaltensanalyse?</h4>
            <p>Die Verhaltensanalyse hilft dir dabei, deine automatischen Reaktionen zu verstehen. 
            Sie zeigt den Zusammenhang zwischen Situationen, Gedanken, Gef√ºhlen und Verhalten auf.</p>
            <p><strong>SORKC-Modell:</strong></p>
            <ul>
                <li><strong>S</strong>ituation: Was war der Ausl√∂ser?</li>
                <li><strong>O</strong>rganismus: Deine Tagesform und Grundeinstellungen</li>
                <li><strong>R</strong>eaktion: Gedanken, Gef√ºhle, K√∂rper, Verhalten</li>
                <li><strong>K</strong>onsequenzen: Kurzfristige Folgen</li>
                <li><strong>C</strong>onsequences: Langfristige Folgen</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Verhaltensanalyse-Formular
        if "behavior_analyses" not in st.session_state:
            st.session_state.behavior_analyses = []
        
        with st.form("behavior_analysis_form"):                # Visualisierung der Emotion
                st.markdown(f"""
                <div style="background: {data['color']}; color: white; padding: 2em; border-radius: 15px; text-align: center; margin: 1em 0;">
                    <h3>{main_emotion}</h3>
                    <h4>{selected_subcategory}</h4>
                    <p>Intensit√§t: {intensity}/10</p>
                    <div style="background: rgba(255,255,255,0.3); height: 15px; border-radius: 10px; margin: 1em 0;">
                        <div style="background: white; height: 100%; width: {intensity*10}%; border-radius: 10px; transition: width 0.3s ease;"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # K√∂rperliche Sensationen
                st.markdown("**ü´Ä Wo sp√ºrst du das im K√∂rper?**")
                body_sensations = st.multiselect(
                    "W√§hle alles was zutrifft:",
                    ["üíì Herz rast", "ü´Å Atemprobleme", "üòµ Kopfschmerzen", "üí™ Muskelverspannungen", 
                     "ü§¢ √úbelkeit", "ü•µ Hitzewallungen", "ü•∂ K√§lteschauer", "üòµ‚Äçüí´ Schwindel", 
                     "ü§≤ Zittern", "üí§ M√ºdigkeit", "üîã Energielosigkeit", "‚ö° Unruhe"]
                )
                
                if st.button("üíæ Gef√ºhlszustand speichern", type="primary"):
                    emotion_entry = {
                        "timestamp": datetime.datetime.now().isoformat(),
                        "main_emotion": main_emotion,
                        "subcategory": selected_subcategory,
                        "intensity": intensity,
                        "body_sensations": body_sensations,
                        "id": len(st.session_state.user_mood_history) + 1
                    }
                    st.session_state.user_mood_history.append(emotion_entry)
                    st.success("üéØ Emotion erfasst! Du entwickelst Achtsamkeit f√ºr deine Gef√ºhle.")
                    
                    # Sofortige Hilfe anbieten
                    if intensity >= 7:
                        st.warning("‚ö†Ô∏è Das ist ziemlich intensiv! Soll ich dir Regulation-Tools zeigen?")
                        if st.button("üßò Ja, hilf mir!"):
                            st.session_state.show_regulation_tools = True
    
    with tab2:
        st.markdown("### üé® Deine emotionale Landkarte")
        st.markdown("*Visualisiere deine Gef√ºhlswelt*")
        
        # Emotionsmapping-Tool
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("**üó∫Ô∏è Wo stehst du emotional gerade?**")
            
            # Interaktive Emotionslandkarte
            emotions_grid = {
                "Hoch aktiviert": {
                    "Positiv": ["üéâ Euphorie", "‚ö° Aufregung", "üí™ Energie", "üî• Leidenschaft"],
                    "Negativ": ["üò° Wut", "üò∞ Panik", "üòñ Stress", "üå™Ô∏è Chaos"]
                },
                "Niedrig aktiviert": {
                    "Positiv": ["üòå Ruhe", "üïØÔ∏è Frieden", "üíô Zufriedenheit", "üåÖ Gelassenheit"],
                    "Negativ": ["üòî Trauer", "üòë Leere", "üò¥ Ersch√∂pfung", "üåßÔ∏è Melancholie"]
                }
            }
            
            selected_quadrant = st.selectbox(
                "W√§hle deinen emotionalen Bereich:",
                ["Hoch aktiviert + Positiv", "Hoch aktiviert + Negativ", 
                 "Niedrig aktiviert + Positiv", "Niedrig aktiviert + Negativ"]
            )
            
            # Parse selection
            activation_level = "Hoch aktiviert" if "Hoch" in selected_quadrant else "Niedrig aktiviert"
            valence = "Positiv" if "Positiv" in selected_quadrant else "Negativ"
            
            emotions_in_quadrant = emotions_grid[activation_level][valence]
            
            selected_emotion_detailed = st.radio(
                f"Genauer gesagt - {activation_level} & {valence}:",
                emotions_in_quadrant
            )
            
            # Zus√§tzliche Dimensionen
            st.markdown("**üìä Weitere Dimensionen:**")
            col_a, col_b = st.columns(2)
            
            with col_a:
                clarity = st.slider("üîç Wie klar ist das Gef√ºhl?", 1, 10, 5)
                duration = st.selectbox("‚è±Ô∏è Wie lange schon?", 
                                       ["Gerade erst", "Seit heute", "Seit gestern", 
                                        "Diese Woche", "L√§nger"])
            
            with col_b:
                controllability = st.slider("üéõÔ∏è Wie kontrollierbar?", 1, 10, 5)
                social_context = st.selectbox("üë• Sozialer Kontext:", 
                                             ["Allein", "Mit Familie", "Mit Freunden", 
                                              "Bei der Arbeit", "In der √ñffentlichkeit"])
        
        with col2:
            # Emotional Weather Report
            st.markdown("**üå§Ô∏è Dein emotionales Wetter:**")
            
            weather_mapping = {
                ("Hoch aktiviert", "Positiv"): "‚òÄÔ∏è Sonnenschein",
                ("Hoch aktiviert", "Negativ"): "‚õàÔ∏è Gewitter",
                ("Niedrig aktiviert", "Positiv"): "üåÖ Klarer Himmel",
                ("Niedrig aktiviert", "Negativ"): "üåßÔ∏è Regenwetter"
            }
            
            current_weather = weather_mapping.get((activation_level, valence), "üå´Ô∏è Nebelig")
            
            st.markdown(f"""
            <div style="background: linear-gradient(135deg, #74b9ff, #0984e3); color: white; padding: 2em; border-radius: 20px; text-align: center;">
                <h3>Aktuelles Gef√ºhls-Wetter</h3>
                <div style="font-size: 3em; margin: 0.5em 0;">{current_weather.split()[0]}</div>
                <h4>{current_weather.split(' ', 1)[1]}</h4>
                <p><strong>Emotion:</strong> {selected_emotion_detailed}</p>
                <p><strong>Klarheit:</strong> {clarity}/10</p>
                <p><strong>Kontrolle:</strong> {controllability}/10</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Wettervorhersage (spielerisch)
            if st.button("üîÆ Emotionale Wettervorhersage"):
                forecasts = [
                    "Morgen: Leicht bew√∂lkt mit Chancen auf Motivation",
                    "Diese Woche: Wechselhaft, aber mit sonnigen Momenten",
                    "Wochenende: Entspannung mit gelegentlichen Hoffnungsschauern",
                    "N√§chste Woche: Stabil mit leichter Besserungstendenz"
                ]
                st.info(random.choice(forecasts))
    
    with tab3:
        st.markdown("### üßò Emotions-Regulation Toolbox")
        st.markdown("*Werkzeuge f√ºr den Umgang mit schwierigen Gef√ºhlen*")
        
        # Regulation Techniques basierend auf aktueller Emotion
        current_intensity = getattr(st.session_state, 'current_emotion_intensity', 5)
        
        if current_intensity >= 7:
            st.warning("üö® Hohe Intensit√§t erkannt - Hier sind Sofort-Hilfe Tools:")
            
            tab_crisis, tab_breathing, tab_grounding = st.tabs(["üÜò Krisen-Tools", "ü´Å Atemtechniken", "üåç Grounding"])
            
            with tab_crisis:
                st.markdown("**üÜò Wenn alles zu viel wird:**")
                
                if st.button("‚ùÑÔ∏è Eisw√ºrfel-Trick"):
                    st.info("""
                    üßä **Eisw√ºrfel-Methode:**
                    1. Nimm einen Eisw√ºrfel in die Hand
                    2. Sp√ºre die K√§lte bewusst
                    3. Konzentriere dich nur auf diese Sensation
                    4. Lass den Eisw√ºrfel schmelzen
                    
                    Das holt dich zur√ºck ins Hier und Jetzt!
                    """)
                
                if st.button("üöø Kalt-Warm-Technik"):
                    st.info("""
                    üå°Ô∏è **Temperatur-Regulation:**
                    1. Kaltes Wasser √ºber die Handgelenke
                    2. Oder ein warmes Bad f√ºr die F√º√üe
                    3. Bewusst den Temperaturwechsel sp√ºren
                    
                    Hilft beim Reset des Nervensystems!
                    """)
                
                if st.button("üì± Notfall-Kontakte"):
                    st.error("""
                    ‚òéÔ∏è **Wenn es wirklich schlimm wird:**
                    
                    ‚Ä¢ **Telefonseelsorge:** 0800 111 0 111 oder 0800 111 0 222
                    ‚Ä¢ **Nummer gegen Kummer:** 116 123
                    ‚Ä¢ **Bei akuter Gefahr:** 112
                    
                    Du bist nicht allein! ‚ù§Ô∏è
                    """)
            
            with tab_breathing:
                st.markdown("**ü´Å Atem-Techniken:**")
                
                breathing_technique = st.selectbox(
                    "W√§hle eine Technik:",
                    ["4-7-8 Atmung", "Box-Breathing", "478 Beruhigung", "Bauchatmung"]
                )
                
                if breathing_technique == "4-7-8 Atmung":
                    if st.button("‚ñ∂Ô∏è Starten"):
                        st.markdown("""
                        **üå¨Ô∏è 4-7-8 Atemtechnik:**
                        
                        1. 4 Sekunden **einatmen** üì•
                        2. 7 Sekunden **anhalten** ‚è∏Ô∏è
                        3. 8 Sekunden **ausatmen** üì§
                        
                        Wiederhole 4x. Entspannung kommt automatisch!
                        """)
                        
                        # Simulation with progress bars
                        for cycle in range(4):
                            st.write(f"**Zyklus {cycle + 1}/4**")
                            
                            st.write("Einatmen...")
                            progress = st.progress(0)
                            for i in range(40):
                                progress.progress((i + 1) / 40)
                                time.sleep(0.1)
                            
                            st.write("Anhalten...")
                            progress = st.progress(0)
                            for i in range(70):
                                progress.progress((i + 1) / 70)
                                time.sleep(0.1)
                            
                            st.write("Ausatmen...")
                            progress = st.progress(0)
                            for i in range(80):
                                progress.progress((i + 1) / 80)
                                time.sleep(0.1)
                        
                        st.success("üåü Gut gemacht! Wie f√ºhlst du dich jetzt?")
                
                elif breathing_technique == "Box-Breathing":
                    st.info("""
                    **üì¶ Box-Breathing (4-4-4-4):**
                    
                    1. 4 Sek einatmen
                    2. 4 Sek halten
                    3. 4 Sek ausatmen  
                    4. 4 Sek halten
                    
                    Stelle dir ein Quadrat vor und folge den Seiten!
                    """)
            
            with tab_grounding:
                st.markdown("**üåç Grounding-Techniken:**")
                
                if st.button("5-4-3-2-1 Technik"):
                    st.markdown("""
                    **üëÄ 5-4-3-2-1 Sinnes-Grounding:**
                    
                    Benenne laut oder in Gedanken:
                    
                    ‚Ä¢ **5 Dinge** die du SIEHST üëÅÔ∏è
                    ‚Ä¢ **4 Dinge** die du F√úHLST (Textur, Temperatur) ‚úã
                    ‚Ä¢ **3 Dinge** die du H√ñRST üëÇ  
                    ‚Ä¢ **2 Dinge** die du RIECHST üëÉ
                    ‚Ä¢ **1 Ding** das du SCHMECKST üëÖ
                    
                    Das holt dich zur√ºck in die Realit√§t!
                    """)
                
                if st.button("ü¶∂ F√º√üe am Boden"):
                    st.info("""
                    **üåç Erdungs-√úbung:**
                    
                    1. Sp√ºre deine F√º√üe am Boden
                    2. Dr√ºcke sie bewusst fest auf
                    3. Sp√ºre die Verbindung zur Erde
                    4. Du bist hier, du bist sicher
                    5. Atme in dieses Gef√ºhl hinein
                    """)
        
        else:
            # Regul√§re Regulation Tools f√ºr moderate Intensit√§t
            st.info("üíô Du scheinst in einem moderaten emotionalen Bereich zu sein. Hier sind Tools zur Regulation:")
            
            tab_mindful, tab_reframe, tab_physical = st.tabs(["üßò Achtsamkeit", "üîÑ Reframing", "üí™ K√∂rperlich"])
            
            with tab_mindful:
                st.markdown("**üßò Achtsamkeits-√úbungen:**")
                
                mindful_exercises = {
                    "Body Scan": "Scanne deinen K√∂rper von Kopf bis Fu√ü. Wo sitzt die Emotion?",
                    "Emotions-Beobachter": "Beobachte deine Emotion wie einen Wettervorgang. Ohne zu urteilen.",
                    "Atem-Anker": "Nutze deinen Atem als Anker. Kehre immer zu ihm zur√ºck.",
                    "Selbst-Mitgef√ºhl": "Sprich mit dir wie mit einem guten Freund in derselben Lage."
                }
                
                for exercise, description in mindful_exercises.items():
                    if st.button(f"üå∏ {exercise}"):
                        st.success(f"**{exercise}:** {description}")
            
            with tab_reframe:
                st.markdown("**üîÑ Perspective Shifts:**")
                
                current_thought = st.text_input("Was denkst du gerade?", placeholder="z.B. 'Das schaffe ich nie'")
                
                if current_thought:
                    reframes = [
                        f"Alternativer Gedanke: 'Das ist schwer, aber ich kann kleine Schritte gehen.'",
                        f"Freund-Perspektive: 'Was w√ºrdest du einem Freund in dieser Lage sagen?'",
                        f"Zukunfts-Ich: 'Was wird dein zuk√ºnftiges Ich √ºber diese Situation denken?'",
                        f"Neugierig werden: 'Was kann ich aus dieser Situation lernen?'"
                    ]
                    
                    for reframe in reframes:
                        st.info(reframe)
            
            with tab_physical:
                st.markdown("**üí™ K√∂rperliche Regulation:**")
                
                physical_tools = {
                    "Progressive Muskelentspannung": "Spanne 5 Sek an, dann 10 Sek entspannen. Von Kopf bis Fu√ü.",
                    "Klopftechnik": "Klopfe sanft auf Brust, Arme, Beine. Das beruhigt das Nervensystem.",
                    "Sch√ºtteln": "Sch√ºttle 30 Sek den ganzen K√∂rper. Lass Spannungen raus!",
                    "Selbst-Umarmung": "Umarme dich selbst. Du verdienst Mitgef√ºhl."
                }
                
                for tool, instruction in physical_tools.items():
                    if st.button(f"ü§≤ {tool}"):
                        st.success(f"**{tool}:** {instruction}")
    
    with tab4:
        st.markdown("### üìä Deine emotionale Reise")
        st.markdown("*Erkenne Muster und Fortschritte*")
        
        if st.session_state.user_mood_history:
            # Emotionstrends
            st.markdown("**üìà Deine letzten Emotionen:**")
            
            recent_moods = st.session_state.user_mood_history[-10:]  # Letzte 10
            
            for mood in reversed(recent_moods):
                timestamp = datetime.datetime.fromisoformat(mood["timestamp"])
                time_str = timestamp.strftime("%d.%m %H:%M")
                
                st.markdown(f"""
                <div class="diary-entry">
                    <strong>{time_str}</strong><br>
                    {mood.get('main_emotion', 'Unbekannt')} ‚Üí {mood.get('subcategory', 'Unbekannt')}<br>
                    Intensit√§t: {mood.get('intensity', 0)}/10
                    {f"<br>K√∂rperlich: {', '.join(mood.get('body_sensations', []))}" if mood.get('body_sensations') else ""}
                </div>
                """, unsafe_allow_html=True)
            
            # Statistiken
            st.markdown("---")
            st.markdown("**üéØ Emotionale Statistiken:**")
            
            col1, col2, col3 = st.columns(3)
            
            # H√§ufigste Emotion
            main_emotions = [mood.get('main_emotion', '') for mood in st.session_state.user_mood_history]
            if main_emotions:
                most_common = max(set(main_emotions), key=main_emotions.count)
                col1.metric("H√§ufigste Emotion", most_common)
            
            # Durchschnittliche Intensit√§t
            intensities = [mood.get('intensity', 0) for mood in st.session_state.user_mood_history]
            if intensities:
                avg_intensity = sum(intensities) / len(intensities)
                col2.metric("‚åÄ Intensit√§t", f"{avg_intensity:.1f}/10")
            
            # Tracking-Streak
            col3.metric("Eintr√§ge gesamt", len(st.session_state.user_mood_history))
            
            # Insights
            st.markdown("---")
            st.markdown("**üí° Deine emotionalen Insights:**")
            
            if avg_intensity > 7:
                st.warning("üî• Du erlebst oft intensive Emotionen. Das ist normal, aber achte auf Selbstf√ºrsorge!")
            elif avg_intensity < 3:
                st.info("üòå Du bist emotional ziemlich ausgeglichen. Das ist eine St√§rke!")
            else:
                st.success("‚öñÔ∏è Du hast eine gesunde emotionale Balance!")
            
            # Wochentag-Pattern (wenn genug Daten)
            if len(st.session_state.user_mood_history) >= 7:
                st.markdown("**üìÖ Wann f√ºhlst du dich wie?**")
                weekday_moods = {}
                for mood in st.session_state.user_mood_history:
                    timestamp = datetime.datetime.fromisoformat(mood["timestamp"])
                    weekday = timestamp.strftime("%A")
                    weekday_moods[weekday] = weekday_moods.get(weekday, []) + [mood.get('intensity', 0)]
                
                for weekday, intensities in weekday_moods.items():
                    avg = sum(intensities) / len(intensities)
                    st.write(f"**{weekday}:** ‚åÄ{avg:.1f}/10 ({len(intensities)} Eintr√§ge)")
        
        else:
            st.info("üìä Noch keine Emotions-Daten. Beginne mit dem Gef√ºhls-Check, um deine emotionale Reise zu verfolgen!")

def handle_cognitive_module():
    """Erweitertes kognitives Modul mit CBT-Techniken"""
    
    tab1, tab2, tab3, tab4 = st.tabs(["üß† Gedanken-Detektiv", "üîç Denkfallen", "üí≠ Gedanken-Protokoll", "üéØ Realit√§ts-Check"])
    
    with tab1:
        st.markdown("### üß† Was geht dir durch den Kopf?")
        st.markdown("*Werde zum Detektiv deiner eigenen Gedanken*")
        
        # Aktueller Gedanke
        current_thought = st.text_area(
            "Welcher Gedanke besch√§ftigt dich gerade?",
            placeholder="z.B. 'Ich schaffe das nie', 'Alle denken schlecht √ºber mich', 'Das wird ein Desaster'",
            height=100
        )
        
        if current_thought:
            st.markdown("---")
            
            # Gedanken-Analyse
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üî¨ Automatische Gedanken-Analyse:**")
                
                # Emotion zum Gedanken
                thought_emotion = st.selectbox(
                    "Welche Emotion l√∂st dieser Gedanke aus?",
                    ["üò∞ Angst", "üò¢ Traurigkeit", "üò° Wut", "üòñ Frustration", 
                     "üòî Hoffnungslosigkeit", "üò§ √Ñrger", "ü§î Verwirrung"]
                )
                
                emotion_intensity = st.slider("Wie stark? (1-10)", 1, 10, 5)
                
                # Kontext
                thought_context = st.text_input(
                    "In welcher Situation kam der Gedanke auf?",
                    placeholder="z.B. 'Bei der Arbeit', 'Zu Hause', 'Mit Freunden'"
                )
            
            with col2:
                st.markdown(f"""
                <div style="background: linear-gradient(135deg, #ff6b6b, #feca57); color: white; padding: 1.5em; border-radius: 15px;">
                    <h4>üéØ Gedanken-Profil</h4>
                    <p><strong>Emotion:</strong> {thought_emotion}</p>
                    <p><strong>Intensit√§t:</strong> {emotion_intensity}/10</p>
                    <p><strong>Kontext:</strong> {thought_context or 'Nicht angegeben'}</p>
                    <div style="background: rgba(255,255,255,0.2); height: 10px; border-radius: 5px; margin: 1em 0;">
                        <div style="background: white; height: 100%; width: {emotion_intensity*10}%; border-radius: 5px;"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            # Sofortiger Gedanken-Check
            st.markdown("---")
            st.markdown("**üîç Schnell-Analyse deines Gedankens:**")
            
            quick_checks = {
                "Wahrscheinlichkeit": "Wie wahrscheinlich ist es, dass das wirklich passiert? (1-100%)",
                "Beweise daf√ºr": "Welche Beweise SPRECHEN f√ºr diesen Gedanken?",
                "Beweise dagegen": "Welche Beweise SPRECHEN GEGEN diesen Gedanken?",
                "Worst Case": "Was w√§re das Schlimmste, was passieren k√∂nnte?",
                "Best Case": "Was w√§re das Beste, was passieren k√∂nnte?",
                "Most Likely": "Was wird realistisch betrachtet wahrscheinlich passieren?"
            }
            
            for check_name, question in quick_checks.items():
                with st.expander(f"ü§î {check_name}"):
                    if check_name == "Wahrscheinlichkeit":
                        probability = st.slider(question, 0, 100, 50)
                        if probability < 30:
                            st.success("üí° Das ist ziemlich unwahrscheinlich! Vielleicht √ºbertreibt dein Gehirn?")
                        elif probability > 70:
                            st.info("üéØ Das scheint wahrscheinlich. Lass uns L√∂sungen finden!")
                    else:
                        response = st.text_area(question, key=f"check_{check_name}")
                        if response:
                            st.info(f"Notiert: {response}")
    
    with tab2:
        st.markdown("### üîç Denkfallen-Detektor")
        st.markdown("*Erkenne die Tricks deines Gehirns*")
        
        # Denkfallen-Katalog
        cognitive_distortions = {
            "üîÆ Gedankenlesen": {
                "description": "Du denkst, du wei√üt was andere denken",
                "example": "'Er findet mich bestimmt langweilig'",
                "counter": "Frag nach oder beobachte objektiv das Verhalten",
                "questions": ["Woher wei√üt du das?", "Hast du gefragt?", "Gibt es andere Erkl√§rungen?"]
            },
            "üåç Katastrophisieren": {
                "description": "Du stellst dir das Schlimmste vor",
                "example": "'Wenn ich das vermassel, ist mein Leben ruiniert'",
                "counter": "Was ist realistisch betrachtet wahrscheinlich?",
                "questions": ["Ist das wirklich das Ende der Welt?", "Was w√ºrde einem Freund sagen?"]
            },
            "‚ö´ Schwarz-Wei√ü-Denken": {
                "description": "Alles ist entweder perfekt oder katastrophal",
                "example": "'Wenn es nicht perfekt ist, ist es wertlos'",
                "counter": "Suche nach Graut√∂nen und Zwischenl√∂sungen",
                "questions": ["Gibt es etwas dazwischen?", "Wo ist die Mitte?"]
            },
            "üîç √úbergeneralisierung": {
                "description": "Ein Ereignis wird zu einem Muster gemacht",
                "example": "'Das passiert mir immer'",
                "counter": "Sammle konkrete Gegenbeispiele",
                "questions": ["Stimmt 'immer' wirklich?", "Wann war es anders?"]
            },
            "üéØ Personalisierung": {
                "description": "Du machst dich f√ºr alles verantwortlich",
                "example": "'Es ist meine Schuld, dass er schlechte Laune hat'",
                "counter": "Andere Menschen haben eigene Gr√ºnde f√ºr ihre Gef√ºhle",
                "questions": ["Welche anderen Faktoren k√∂nnten eine Rolle spielen?"]
            },
            "üîÆ Wahrsagerei": {
                "description": "Du prophezeist negative Zukunft",
                "example": "'Das wird sicher schief gehen'",
                "counter": "Die Zukunft ist ungewiss und kann positiv √ºberraschen",
                "questions": ["Wie oft lagen deine Vorhersagen falsch?"]
            },
            "üìä Emotional Reasoning": {
                "description": "Gef√ºhle werden als Fakten behandelt",
                "example": "'Ich f√ºhle mich dumm, also bin ich dumm'",
                "counter": "Gef√ºhle sind Signale, keine Wahrheiten",
                "questions": ["Ist das ein Gef√ºhl oder ein Fakt?"]
            },
            "üè∑Ô∏è Labeling": {
                "description": "Du stempelst dich oder andere ab",
                "example": "'Ich bin ein Versager'",
                "counter": "Menschen sind komplex, nicht nur ein Label",
                "questions": ["Beschreibt das wirklich den ganzen Menschen?"]
            }
        }
        
        # Denkfallen-Test
        if current_thought:
            st.markdown(f"**üîç Denkfallen-Check f√ºr:** '{current_thought}'")
            
            detected_distortions = []
            
            for distortion_name, distortion_info in cognitive_distortions.items():
                if st.button(f"K√∂nnte das {distortion_name} sein?", key=f"distortion_{distortion_name}"):
                    detected_distortions.append(distortion_name)
                    
                    st.markdown(f"""
                    <div style="background: linear-gradient(135deg, #fd79a8, #fdcb6e); color: white; padding: 1.5em; border-radius: 15px; margin: 1em 0;">
                        <h4>üéØ {distortion_name} erkannt!</h4>
                        <p><strong>Was das ist:</strong> {distortion_info['description']}</p>
                        <p><strong>Beispiel:</strong> {distortion_info['example']}</p>
                        <p><strong>Gegenmittel:</strong> {distortion_info['counter']}</p>
                        <p><strong>Hilfreiche Fragen:</strong></p>
                        <ul>{''.join([f'<li>{q}</li>' for q in distortion_info['questions']])}</ul>
                    </div>
                    """, unsafe_allow_html=True)
        
        elseimport streamlit as st
import time
import random
import datetime

# App-Konfiguration
st.set_page_config(
    page_title="Traumatisierender Taschen-Therapeut", 
    page_icon="üéß", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Kompatibilit√§tsfunktion f√ºr verschiedene Streamlit-Versionen
def rerun_app():
    """Kompatible Funktion f√ºr App-Neustart"""
    try:
        st.rerun()
    except AttributeError:
        try:
            st.experimental_rerun()
        except AttributeError:
            st.legacy_caching.clear_cache()
            st.stop()

# Session State initialisieren
if "insurance" not in st.session_state:
    st.session_state.insurance = None
if "loading_done" not in st.session_state:
    st.session_state.loading_done = False
if "show_button" not in st.session_state:
    st.session_state.show_button = False
if "diary_entries" not in st.session_state:
    st.session_state.diary_entries = []
if "therapy_points" not in st.session_state:
    st.session_state.therapy_points = 0
if "game_score" not in st.session_state:
    st.session_state.game_score = 0
if "user_mood_history" not in st.session_state:
    st.session_state.user_mood_history = []
if "current_theme" not in st.session_state:
    st.session_state.current_theme = "cozy"

# Erweiterte CSS-Styling mit Animationen und modernem Design
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Caveat:wght@400;600;700&display=swap');

:root {
    --primary-color: #667eea;
    --secondary-color: #764ba2;
    --accent-color: #f093fb;
    --warm-color: #ffecd2;
    --success-color: #4ecdc4;
    --warning-color: #ffe66d;
    --danger-color: #ff6b6b;
    --text-primary: #2d3748;
    --text-secondary: #4a5568;
    --bg-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --bg-card: rgba(255, 255, 255, 0.95);
    --shadow: 0 10px 25px rgba(0,0,0,0.1);
    --shadow-hover: 0 20px 40px rgba(0,0,0,0.15);
}

html, body, [data-testid="stAppViewContainer"] {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    background-attachment: fixed;
    color: var(--text-primary);
}

/* Floating background elements */
.background-decoration {
    position: fixed;
    pointer-events: none;
    z-index: -1;
}

.floating-shape {
    position: absolute;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    animation: float 6s ease-in-out infinite;
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

.gradient-text {
    background: linear-gradient(45deg, #667eea, #764ba2, #f093fb);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: gradient-shift 3s ease infinite;
}

@keyframes gradient-shift {
    0%, 100% { filter: hue-rotate(0deg); }
    50% { filter: hue-rotate(30deg); }
}

.main-title {
    text-align: center;
    font-family: 'Caveat', cursive;
    font-size: 3.5em;
    font-weight: 700;
    margin: 0.5em 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    animation: glow 2s ease-in-out infinite alternate;
}

@keyframes glow {
    from { text-shadow: 2px 2px 4px rgba(0,0,0,0.3), 0 0 10px rgba(255,255,255,0.2); }
    to { text-shadow: 2px 2px 4px rgba(0,0,0,0.3), 0 0 20px rgba(255,255,255,0.4); }
}

.subtitle {
    text-align: center;
    font-size: 1.4em;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 2em;
    font-weight: 300;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
}

.main-container {
    background: var(--bg-card);
    border-radius: 25px;
    padding: 2.5em;
    margin: 1em auto;
    max-width: 1200px;
    box-shadow: var(--shadow);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255,255,255,0.3);
}

.stButton > button {
    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.1em;
    font-weight: 500;
    border-radius: 50px;
    margin: 10px 5px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    position: relative;
    overflow: hidden;
    width: 100%;
}

.stButton > button:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-hover);
    background: linear-gradient(45deg, var(--secondary-color), var(--accent-color));
}

.stButton > button:active {
    transform: translateY(-1px);
}

/* Card Styles */
.therapy-card {
    background: var(--bg-card);
    border-radius: 20px;
    padding: 2em;
    margin: 1em 0;
    box-shadow: var(--shadow);
    border: 1px solid rgba(255,255,255,0.5);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.therapy-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-hover);
}

.therapy-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--bg-primary);
}

.info-box {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
    border: 2px solid rgba(102, 126, 234, 0.2);
    padding: 2em;
    border-radius: 20px;
    margin: 1.5em 0;
    position: relative;
    overflow: hidden;
}

.info-box::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
    transform: rotate(45deg);
    animation: shine 3s infinite;
}

@keyframes shine {
    0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
    100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
}

.quote-box {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    padding: 2em;
    border-radius: 20px;
    font-style: italic;
    font-size: 1.1em;
    margin: 1.5em 0;
    box-shadow: var(--shadow);
    position: relative;
    overflow: hidden;
}

.quote-box::before {
    content: '"';
    font-size: 4em;
    position: absolute;
    top: -10px;
    left: 20px;
    opacity: 0.3;
    font-family: serif;
}

.diary-entry {
    background: linear-gradient(135deg, #f8f9ff, #e8f0ff);
    border-left: 5px solid var(--primary-color);
    padding: 1.5em;
    margin: 1em 0;
    border-radius: 0 15px 15px 0;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    transition: transform 0.2s ease;
}

.diary-entry:hover {
    transform: translateX(5px);
}

.module-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5em;
    margin: 2em 0;
}

.module-card {
    background: var(--bg-card);
    border-radius: 20px;
    padding: 2em;
    text-align: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    border: 2px solid transparent;
    position: relative;
    overflow: hidden;
}

.module-card:hover {
    transform: translateY(-8px) scale(1.02);
    border-color: var(--primary-color);
    box-shadow: var(--shadow-hover);
}

.module-icon {
    font-size: 3em;
    margin-bottom: 0.5em;
    display: block;
    animation: bounce 2s infinite;
}

@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

.progress-container {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 25px;
    padding: 0.5em;
    margin: 1em 0;
    backdrop-filter: blur(10px);
}

.progress-bar {
    background: linear-gradient(90deg, var(--success-color), var(--warning-color));
    height: 12px;
    border-radius: 25px;
    transition: width 0.5s ease;
    position: relative;
    overflow: hidden;
}

.progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    animation: progress-shine 2s infinite;
}

@keyframes progress-shine {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

.mood-selector {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 1em;
    margin: 1.5em 0;
}

.mood-item {
    background: var(--bg-card);
    border-radius: 15px;
    padding: 1em;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    min-width: 100px;
}

.mood-item:hover {
    transform: scale(1.1);
    border-color: var(--primary-color);
    box-shadow: 0 5px 20px rgba(102, 126, 234, 0.3);
}

.mood-item.selected {
    border-color: var(--primary-color);
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
}

.floating-hearts {
    position: fixed;
    pointer-events: none;
    z-index: 1000;
}

.heart {
    position: absolute;
    color: var(--accent-color);
    font-size: 1.5em;
    animation: float-heart 3s ease-out forwards;
}

@keyframes float-heart {
    0% {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
    100% {
        opacity: 0;
        transform: translateY(-100px) scale(0.5);
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .main-title {
        font-size: 2.5em;
    }
    
    .main-container {
        margin: 0.5em;
        padding: 1.5em;
    }
    
    .module-grid {
        grid-template-columns: 1fr;
    }
}

/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: var(--bg-primary);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--secondary-color);
}

/* Loading Animation */
.loading-spinner {
    display: inline-block;
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Glassmorphism effects */
.glass-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    padding: 2em;
    margin: 1em 0;
}

/* Theme colors for different moods */
.theme-cozy { --accent: #ffeaa7; }
.theme-energetic { --accent: #74b9ff; }
.theme-calm { --accent: #81ecec; }
.theme-creative { --accent: #fd79a8; }

</style>
""", unsafe_allow_html=True)

# Background Decorations
st.markdown("""
<div class="background-decoration">
    <div class="floating-shape" style="width: 100px; height: 100px; top: 10%; left: 5%; animation-delay: 0s;"></div>
    <div class="floating-shape" style="width: 60px; height: 60px; top: 20%; right: 10%; animation-delay: 1s;"></div>
    <div class="floating-shape" style="width: 80px; height: 80px; bottom: 30%; left: 10%; animation-delay: 2s;"></div>
    <div class="floating-shape" style="width: 120px; height: 120px; bottom: 10%; right: 5%; animation-delay: 3s;"></div>
</div>
""", unsafe_allow_html=True)

# Titel & Untertitel mit verbessertem Design
st.markdown('<div class="main-title gradient-text">üéß Traumatisierender Taschen-Therapeut</div>', unsafe_allow_html=True)

# Hauptcontainer
st.markdown('<div class="main-container">', unsafe_allow_html=True)

# Hauptlogik
if st.session_state.insurance is None:
    # Verbesserte Versicherungsauswahl
    st.markdown('<div class="subtitle">üè• Bitte w√§hle deine Krankenversicherung</div>', unsafe_allow_html=True)
    st.markdown("*Diese lebenswichtige Entscheidung bestimmt die Qualit√§t deiner digitalen Seelenhygiene*")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        # GKV Option
        st.markdown("""
        <div class="therapy-card" style="text-align: center; margin-bottom: 1em;">
            <div style="font-size: 4em; margin-bottom: 0.5em;">ü™™</div>
            <h3>Gesetzlich versichert</h3>
            <p style="color: #666;">Standard-Leid mit Wartezeit-Bonus</p>
            <ul style="text-align: left; margin: 1em 0;">
                <li>6-18 Monate Wartezeit (Geduld ist eine Tugend)</li>
                <li>Grundversorgung der Verzweiflung</li>
                <li>Kostenloses Wartezimmer-Trauma</li>
                <li>Gruppentherapie mit anderen Hoffnungslosen</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("ü™™ Gesetzlich versichert w√§hlen", key="gkv"):
            st.session_state.insurance = "GKV"
            rerun_app()
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # PKV Option
        st.markdown("""
        <div class="therapy-card" style="text-align: center;">
            <div style="font-size: 4em; margin-bottom: 0.5em;">üíé</div>
            <h3>Privat versichert</h3>
            <p style="color: #666;">Premium-Trauma f√ºr Besserverdienende</p>
            <ul style="text-align: left; margin: 1em 0;">
                <li>24-48h Express-Verzweiflung</li>
                <li>Designer-Therapeuten mit LinkedIn-Profil</li>
                <li>Vergoldete Taschent√ºcher inklusive</li>
                <li>Notfall-Hotline f√ºr Existenzkrisen</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üíé Privat versichert w√§hlen", key="pkv"):
            st.session_state.insurance = "PKV"
            rerun_app()

elif not st.session_state.loading_done:
    # Erweiterte Ladeanimation
    st.markdown("### üîÑ Ihre seelische Verfassung wird analysiert...")
    
    progress_col1, progress_col2, progress_col3 = st.columns([1, 2, 1])
    with progress_col2:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
    botschaften = [
        "üß† Scanne deine psychische Grundausstattung...",
        "üìä Berechne dein Leidens-Niveau...",
        "üîç Analysiere deine Versicherungsklasse...",
        "üí∏ Vergleiche Verzweiflung mit Leistungsumfang...",
        "üé≠ Kalibriere deine Erwartungen nach unten...",
        "üï≥Ô∏è Reserviere deinen Platz im Wartezimmer...",
        "‚ú® Bereite mentale Erste-Hilfe-Ausr√ºstung vor...",
        "üé™ Fast geschafft - Vorhang auf f√ºr dein Drama!"
    ]
    
    # Simuliere erweiterten Ladevorgang
    for i in range(120):
        progress_bar.progress((i + 1) / 120)
        message_index = (i // 15) % len(botschaften)
        
        # Verschiedene Emojis f√ºr verschiedene Phasen
        if i < 30:
            emoji = "üîç"
        elif i < 60:
            emoji = "‚öôÔ∏è"
        elif i < 90:
            emoji = "üìä"
        else:
            emoji = "‚ú®"
            
        status_text.markdown(f"{emoji} **{botschaften[message_index]}**")
        time.sleep(0.03)
    
    st.markdown("""
    <div style="text-align: center; margin: 2em 0;">
        <div class="loading-spinner"></div>
        <p style="margin-top: 1em; font-style: italic;">
            "Der beste Zeitpunkt, einen Therapeuten zu pflanzen, war vor 20 Jahren.<br>
            Der zweitbeste Zeitpunkt ist jetzt." - Konfuzius (wahrscheinlich)
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.button("üéüÔ∏è üö™ Wartezimmer B2.01 betreten", key="enter_therapy"):
        st.session_state.loading_done = True
        rerun_app()

else:
    # Hauptbereich mit erweitertem Design
    status = st.session_state.insurance
    ticket = f"{status}-{random.randint(100000, 999999)}"
    
    # Personalisierte Begr√º√üung
    current_hour = datetime.datetime.now().hour
    if current_hour < 12:
        greeting = "Guten Morgen"
        mood_comment = "Sch√∂n, dass du heute schon hier bist. Das Leben wartet nicht!"
    elif current_hour < 18:
        greeting = "Guten Tag"
        mood_comment = "Mittags-Depression oder Nachmittags-Krise?"
    else:
        greeting = "Guten Abend"
        mood_comment = "Sp√§tschicht der Selbstreflexion, wie ich sehe."
    
    if status == "GKV":
        st.markdown(f"## ü™™ {greeting}, gesch√§tzter Kassenbeitragszahler!")
        st.markdown(f"""
        <div class="info-box">
            <div style="display: flex; align-items: center; margin-bottom: 1em;">
                <div style="font-size: 3em; margin-right: 0.5em;">üéüÔ∏è</div>
                <div>
                    <h3 style="margin: 0;">Ticket: {ticket}</h3>
                    <p style="margin: 0; color: #666;">√ñffentlich-rechtliche Seelenheilkunde</p>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1em; margin: 1.5em 0;">
                <div style="text-align: center; padding: 1em; background: rgba(255,255,255,0.5); border-radius: 10px;">
                    <div style="font-size: 2em;">‚è∞</div>
                    <strong>Wartezeit</strong><br>
                    6-18 Monate<br>
                    <small>(perfekt f√ºr Gedulds-Training)</small>
                </div>
                <div style="text-align: center; padding: 1em; background: rgba(255,255,255,0.5); border-radius: 10px;">
                    <div style="font-size: 2em;">üé≠</div>
                    <strong>Leistungen</strong><br>
                    Basis-Verzweiflung<br>
                    <small>(aber daf√ºr authentisch)</small>
                </div>
                <div style="text-align: center; padding: 1em; background: rgba(255,255,255,0.5); border-radius: 10px;">
                    <div style="font-size: 2em;">üéÅ</div>
                    <strong>Bonus</strong><br>
                    Wartezimmer-Zen<br>
                    <small>(Achtsamkeit durch Langeweile)</small>
                </div>
            </div>
            
            <p style="margin-top: 1.5em; font-style: italic; text-align: center;">
                üí° <strong>Geheimtipp:</strong> {mood_comment}<br>
                Wenn du beim Kartenscannen weinst, z√§hlt das als therapeutisches Vorgespr√§ch!
            </p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"## üíé {greeting}, Premium-Leidender!")
        st.markdown(f"""
        <div class="info-box">
            <div style="display: flex; align-items: center; margin-bottom: 1em;">
                <div style="font-size: 3em; margin-right: 0.5em;">üèÜ</div>
                <div>
                    <h3 style="margin: 0;">VIP-Ticket: {ticket}</h3>
                    <p style="margin: 0; color: #666;">Exklusive Seelen-Couture</p>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1em; margin: 1.5em 0;">
                <div style="text-align: center; padding: 1em; background: linear-gradient(135deg, #ffd700, #ffed4e); border-radius: 10px; color: #333;">
                    <div style="font-size: 2em;">‚ö°</div>
                    <strong>Express-Service</strong><br>
                    24-48h Wartezeit<br>
                    <small>(Krise wartet nicht)</small>
                </div>
                <div style="text-align: center; padding: 1em; background: linear-gradient(135deg, #ff9a9e, #fecfef); border-radius: 10px;">
                    <div style="font-size: 2em;">üõãÔ∏è</div>
                    <strong>Luxus-Equipment</strong><br>
                    Designer-Sitzs√§cke<br>
                    <small>(weinen in Stil)</small>
                </div>
                <div style="text-align: center; padding: 1em; background: linear-gradient(135deg, #a8edea, #fed6e3); border-radius: 10px;">
                    <div style="font-size: 2em;">üìû</div>
                    <strong>24/7 Hotline</strong><br>
                    Notfall-Support<br>
                    <small>(auch f√ºr kleine Krisen)</small>
                </div>
                <div style="text-align: center; padding: 1em; background: linear-gradient(135deg, #ffecd2, #fcb69f); border-radius: 10px;">
                    <div style="font-size: 2em;">ü•á</div>
                    <strong>Premium-Extras</strong><br>
                    Vergoldete Klangschale<br>
                    <small>(Ego-Streicheln inklusive)</small>
                </div>
            </div>
            
            <p style="margin-top: 1.5em; font-style: italic; text-align: center;">
                üí° <strong>VIP-Info:</strong> {mood_comment}<br>
                Dein Therapeut hat bereits dein LinkedIn-Profil studiert und einen personalisierten Behandlungsplan erstellt!
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Erweiterte Therapie-Fortschritts-Anzeige
    st.session_state.therapy_points += 1
    progress = min(st.session_state.therapy_points * 1.5, 100)
    
    st.markdown("### üìä Dein seelischer Entwicklungsstand")
    
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.markdown(f"""
        <div class="progress-container">
            <div class="progress-bar" style="width: {progress}%"></div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.metric("Level", st.session_state.therapy_points, delta=1)
    
    with col3:
        next_milestone = ((st.session_state.therapy_points // 10) + 1) * 10
        remaining = next_milestone - st.session_state.therapy_points
        st.metric("Bis Level-Up", remaining)
    
    # T√§gliches Motivations-Zitat
    motivational_quotes = [
        "Heute ist ein guter Tag, um nicht komplett durchzudrehen! üåü",
        "Du bist st√§rker als deine st√§rkste Ausrede. Wahrscheinlich. üí™",
        "Perfektion ist √ºberbewertet. Chaos ist authentisch! üé®",
        "Auch Therapeuten haben Therapeuten. Du bist in guter Gesellschaft! ü§ù",
        "Fortschritt ist Fortschritt, auch wenn er r√ºckw√§rts ist! üöÄ"
    ]
    
    daily_quote = motivational_quotes[datetime.datetime.now().day % len(motivational_quotes)]
    st.markdown(f"""
    <div class="quote-box" style="margin: 2em 0;">
        {daily_quote}
        <div style="text-align: right; margin-top: 1em; font-size: 0.9em;">
            ‚Äî Dein digitaler Seelen-Coach
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.divider()
    
    # Erweiterte Module-Auswahl mit Grid-Layout
    st.markdown("### üéØ Deine heutige Therapie-Session")
    st.markdown("*W√§hle dein therapeutisches Abenteuer ‚Äì jedes Modul wurde von Experten entwickelt (oder zumindest von jemandem, der mal Psychologie-YouTube geschaut hat)*")
    
    # Module-Grid mit verbessertem Design
    modules_data = {
        "üìî Tagebuch √∂ffnen": {
            "description": "Digitales Seelen-Archiv",
            "subtitle": "Verwandle deine Gedanken in lesbare Verzweiflung",
            "color": "linear-gradient(135deg, #667eea, #764ba2)",
            "benefits": ["Strukturiertes Jammern", "Mood-Tracking", "Erinnerungs-Archiv"]
        },
        "üòÖ Galgenhumor-Modus": {
            "description": "Therapie durch Sarkasmus",
            "subtitle": "Lachen √ºber das Unlachbare",
            "color": "linear-gradient(135deg, #f093fb, #f5576c)",
            "benefits": ["Sarkasmus-Generator", "Ironie-Therapie", "Realit√§ts-Humor"]
        },
        "üéÆ Therapie-Minispiel": {
            "description": "Gamification der Existenzkrise",
            "subtitle": "Level up deine mentale Gesundheit",
            "color": "linear-gradient(135deg, #4facfe, #00f2fe)",
            "benefits": ["Belohnungssystem", "Achievement-Unlock", "Progress-Tracking"]
        },
        "üíô Etwas f√ºhlen": {
            "description": "Emotionsregulation ohne Regulation",
            "subtitle": "Gef√ºhls-Chaos professionell sortieren",
            "color": "linear-gradient(135deg, #a8edea, #fed6e3)",
            "benefits": ["Gef√ºhls-Scanner", "Intensit√§ts-Messung", "Emotions-Mapping"]
        },
        "üß† Etwas verstehen": {
            "description": "Kognitive Verhaltenstherapie f√ºr Dummies",
            "subtitle": "Gedanken-Detektiv werden",
            "color": "linear-gradient(135deg, #ffecd2, #fcb69f)",
            "benefits": ["Denkfallen-Finder", "Realit√§ts-Check", "Gedanken-Korrektur"]
        },
        "üé≠ Innere Anteile besuchen": {
            "description": "Systemische Familientherapie im Kopf",
            "subtitle": "Meet & Greet mit deiner inneren WG",
            "color": "linear-gradient(135deg, #fa709a, #fee140)",
            "benefits": ["Pers√∂nlichkeits-Chat", "Innerer Dialog", "Anteil-Mediation"]
        }
    }
    
    # Erstelle 2x3 Grid f√ºr Module
    row1_cols = st.columns(3)
    row2_cols = st.columns(3)
    all_cols = row1_cols + row2_cols
    
    module_names = list(modules_data.keys())
    
    for i, (col, module_name) in enumerate(zip(all_cols, module_names)):
        module_info = modules_data[module_name]
        
        with col:
            # Module Card mit hover-Effekt
            card_html = f"""
            <div class="module-card" style="background: {module_info['color']}; color: white; min-height: 280px;">
                <div class="module-icon">{module_name.split()[0]}</div>
                <h4 style="margin: 0.5em 0; font-size: 1.2em;">{module_name.split(' ', 1)[1]}</h4>
                <p style="font-size: 0.9em; opacity: 0.9; margin: 0.5em 0;">{module_info['subtitle']}</p>
                <div style="margin: 1em 0; font-size: 0.8em;">
                    {'<br>'.join([f"‚Ä¢ {benefit}" for benefit in module_info['benefits']])}
                </div>
            </div>
            """
            st.markdown(card_html, unsafe_allow_html=True)
            
            if st.button(f"Starten", key=f"start_{i}", help=f"{module_info['description']}"):
                handle_module_selection(module_name, module_info)

def handle_module_selection(module_name: str, module_info: dict):
    """Behandelt die Auswahl eines Moduls mit verbessertem Design"""
    
    # Module Header
    st.markdown(f"""
    <div class="therapy-card" style="background: {module_info['color']}; color: white; text-align: center; margin: 2em 0;">
        <div style="font-size: 4em; margin-bottom: 0.5em;">{module_name.split()[0]}</div>
        <h2 style="margin: 0;">{module_name.split(' ', 1)[1]}</h2>
        <p style="opacity: 0.9; font-size: 1.1em;">{module_info['subtitle']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    if "Tagebuch" in module_name:
        handle_diary_module()
    elif "Galgenhumor" in module_name:
        handle_humor_module()
    elif "Minispiel" in module_name:
        handle_game_module()
    elif "f√ºhlen" in module_name:
        handle_emotions_module()
    elif "verstehen" in module_name:
        handle_cognitive_module()
    elif "Anteile" in module_name:
        handle_parts_module()

def handle_diary_module():
    """Erweiteres Tagebuch-Modul"""
    
    tab1, tab2, tab3, tab4 = st.tabs(["‚úçÔ∏è Neuer Eintrag", "üìö Mein Archiv", "üìä Stimmungs-Analytics", "üéØ Insights"])
    
    with tab1:
        st.markdown("### üìù Was bewegt dich heute?")
        
        # Erweiterte Stimmungsauswahl mit Visualisierung
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("**Aktuelle Stimmung:**")
            mood_options = {
                "üíÄ": {"name": "Existenzkrise", "value": 1, "color": "#ff6b6b"},
                "üò≠": {"name": "Emotional Overload", "value": 2, "color": "#ffa8a8"},
                "üòê": {"name": "Zombie-Modus", "value": 3, "color": "#74b9ff"},
                "üôÇ": {"name": "Geht so", "value": 4, "color": "#00cec9"},
                "‚ú®": {"name": "√úberraschend okay", "value": 5, "color": "#00b894"}
            }
            
            selected_mood = None
            for emoji, data in mood_options.items():
                if st.button(f"{emoji} {data['name']}", key=f"mood_{emoji}"):
                    selected_mood = f"{emoji} {data['name']}"
                    st.session_state.current_mood = data
        
        with col2:
            if hasattr(st.session_state, 'current_mood'):
                mood_data = st.session_state.current_mood
                st.markdown(f"""
                <div style="background: {mood_data['color']}; color: white; padding: 2em; border-radius: 15px; text-align: center;">
                    <h3>Stimmungs-Level: {mood_data['value']}/5</h3>
                    <p>Du hast "{mood_data['name']}" gew√§hlt</p>
                    <div style="background: rgba(255,255,255,0.2); height: 10px; border-radius: 5px; margin: 1em 0;">
                        <div style="background: white; height: 100%; width: {mood_data['value']*20}%; border-radius: 5px;"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Kategorien f√ºr Eintr√§ge
        entry_category = st.selectbox(
            "Was f√ºr ein Eintrag wird das?",
            ["üé≠ Allgemeines Chaos", "üíº Arbeitsfrust", "‚ù§Ô∏è Beziehungsdrama", 
             "üè† Familien-Theater", "üéØ Lebensziele", "üåô N√§chtliche Gedanken",
             "üéâ Positive Momente", "ü§î Selbstreflexion"]
        )
        
        # Intelligente Prompts basierend auf Kategorie
        prompts = {
            "üé≠ Allgemeines Chaos": "Was geht gerade in deinem Kopf vor? Lass alles raus...",
            "üíº Arbeitsfrust": "Was war heute besonders nervig im Job?",
            "‚ù§Ô∏è Beziehungsdrama": "Erz√§hl von deinen zwischenmenschlichen Abenteuern...",
            "üè† Familien-Theater": "Was ist in der Familie los?",
            "üéØ Lebensziele": "Wo willst du hin? Was besch√§ftigt dich?",
            "üåô N√§chtliche Gedanken": "Was h√§lt dich wach oder besch√§ftigt dich vor dem Schlafen?",
            "üéâ Positive Momente": "Was war heute sch√∂n oder hat dich gefreut?",
            "ü§î Selbstreflexion": "Was hast du √ºber dich gelernt?"
        }
        
        entry_text = st.text_area(
            "Deine Gedanken:", 
            placeholder=prompts.get(entry_category, "Schreib einfach drauf los..."),
            height=200,
            help="Hier ist Platz f√ºr alles - das Chaos, die Klarheit, die Widerspr√ºche."
        )
        
        # Tags hinzuf√ºgen
        tags = st.text_input(
            "Tags (durch Komma getrennt):",
            placeholder="z.B. stress, m√ºde, hoffnung, arbeit",
            help="Tags helfen dir sp√§ter beim Wiederfinden √§hnlicher Eintr√§ge"
        )
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ Eintrag speichern", type="primary"):
                if entry_text:
                    new_entry = {
                        "date": datetime.datetime.now().isoformat(),
                        "mood": selected_mood or "üòê Neutral",
                        "category": entry_category,
                        "text": entry_text,
                        "tags": [tag.strip() for tag in tags.split(",") if tag.strip()],
                        "id": len(st.session_state.diary_entries) + 1,
                        "word_count": len(entry_text.split())
                    }
                    st.session_state.diary_entries.append(new_entry)
                    st.session_state.user_mood_history.append({
                        "date": datetime.datetime.now().isoformat(),
                        "mood_value": getattr(st.session_state, 'current_mood', {}).get('value', 3)
                    })
                    
                    # Success Animation
                    st.success("üéâ Eintrag gespeichert! Deine Gedanken sind jetzt digital unsterblich.")
                    st.balloons()
                    
                    # Statistik Update
                    total_words = sum(entry.get('word_count', 0) for entry in st.session_state.diary_entries)
                    st.info(f"üìä Das waren {len(entry_text.split())} W√∂rter. Insgesamt hast du schon {total_words} W√∂rter deiner Seele anvertraut!")
                    
        with col2:
            if st.button("üé≤ Zuf√§lliger Prompt"):
                random_prompts = [
                    "Was w√ºrdest du deinem 5-Jahre-j√ºngeren Ich sagen?",
                    "Beschreibe deinen Tag in drei Worten.",
                    "Was ist das Absurdeste, was dir heute passiert ist?",
                    "Wof√ºr bist du heute dankbar (auch wenns schwerf√§llt)?",
                    "Was brauchst du gerade am meisten?",
                    "Wenn deine Stimmung ein Wetter w√§re, welches w√§re es?",
                    "Was hast du heute gelernt √ºber dich oder das Leben?"
                ]
                prompt = random.choice(random_prompts)
                st.info(f"üí≠ **Schreib-Impuls:** {prompt}")
        
        with col3:
            if st.button("üßò Achtsamkeits-Moment"):
                st.markdown("""
                <div class="quote-box">
                    <h4>üå∏ Kurzer Achtsamkeits-Check:</h4>
                    <p>‚Ä¢ Wie f√ºhlt sich dein K√∂rper gerade an?<br>
                    ‚Ä¢ Was nimmst du um dich herum wahr?<br>
                    ‚Ä¢ Wie ist dein Atem?<br>
                    ‚Ä¢ Was ist in diesem Moment okay?</p>
                </div>
                """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown("### üìö Dein pers√∂nliches Seelen-Archiv")
        
        if st.session_state.diary_entries:
            # Filter Optionen
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Filter nach Kategorie
                all_categories = list(set([entry.get('category', 'Unbekannt') for entry in st.session_state.diary_entries]))
                selected_categories = st.multiselect("Nach Kategorie filtern:", all_categories, default=all_categories)
            
            with col2:
                # Filter nach Tags
                all_tags = list(set([tag for entry in st.session_state.diary_entries for tag in entry.get('tags', [])]))
                if all_tags:
                    selected_tags = st.multiselect("Nach Tags filtern:", all_tags)
                else:
                    selected_tags = []
            
            with col3:
                # Sortierung
                sort_option = st.selectbox("Sortieren nach:", ["Neueste zuerst", "√Ñlteste zuerst", "Nach Stimmung"])
            
            # Gefilterte Eintr√§ge
            filtered_entries = [
                entry for entry in st.session_state.diary_entries
                if entry.get('category', 'Unbekannt') in selected_categories
                and (not selected_tags or any(tag in entry.get('tags', []) for tag in selected_tags))
            ]
            
            # Sortierung anwenden
            if sort_option == "Neueste zuerst":
                filtered_entries = sorted(filtered_entries, key=lambda x: x['date'], reverse=True)
            elif sort_option == "√Ñlteste zuerst":
                filtered_entries = sorted(filtered_entries, key=lambda x: x['date'])
            
            st.markdown(f"**{len(filtered_entries)} Eintr√§ge gefunden**")
            
            # Eintr√§ge anzeigen
            for i, entry in enumerate(filtered_entries[:10]):  # Nur die ersten 10 anzeigen
                date_str = datetime.datetime.fromisoformat(entry["date"]).strftime("%d.%m.%Y um %H:%M")
                
                with st.expander(f"üìÖ {date_str} | {entry.get('category', 'Unbekannt')} | {entry['mood']}"):
                    st.markdown(f"**{entry['text'][:100]}{'...' if len(entry['text']) > 100 else ''}**")
                    
                    if st.button(f"üìñ Vollst√§ndig lesen", key=f"read_full_{i}"):
                        st.markdown(f"""
                        <div class="diary-entry">
                            <h4>{entry.get('category', 'Eintrag')} vom {date_str}</h4>
                            <p><strong>Stimmung:</strong> {entry['mood']}</p>
                            <p><strong>Text:</strong><br>{entry['text']}</p>
                            {f"<p><strong>Tags:</strong> {', '.join(entry.get('tags', []))}</p>" if entry.get('tags') else ""}
                            <p><strong>W√∂rter:</strong> {entry.get('word_count', 'Unbekannt')}</p>
                        </div>
                        """, unsafe_allow_html=True)
        else:
            st.info("üìù Noch keine Eintr√§ge vorhanden. Zeit, deine erste digitale Seelen-Expedition zu starten!")
    
    with tab3:
        st.markdown("### üìä Deine Stimmungs-Reise")
        
        if st.session_state.diary_entries:
            # Stimmungsverteilung
            mood_counts = {}
            category_counts = {}
            
            for entry in st.session_state.diary_entries:
                mood = entry['mood']
                category = entry.get('category', 'Unbekannt')
                mood_counts[mood] = mood_counts.get(mood, 0) + 1
                category_counts[category] = category_counts.get(category, 0) + 1
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üé≠ Stimmungsverteilung:**")
                for mood, count in mood_counts.items():
                    percentage = (count / len(st.session_state.diary_entries)) * 100
                    st.markdown(f"{mood}: {count}x ({percentage:.1f}%)")
            
            with col2:
                st.markdown("**üìÅ Kategorien-Verteilung:**")
                for category, count in category_counts.items():
                    percentage = (count / len(st.session_state.diary_entries)) * 100
                    st.markdown(f"{category}: {count}x ({percentage:.1f}%)")
            
            # Schreibstatistiken
            total_words = sum(entry.get('word_count', 0) for entry in st.session_state.diary_entries)
            avg_words = total_words / len(st.session_state.diary_entries) if st.session_state.diary_entries else 0
            
            st.markdown("---")
            st.markdown("### üìà Deine Schreib-Statistiken")
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("Eintr√§ge gesamt", len(st.session_state.diary_entries))
            col2.metric("W√∂rter gesamt", total_words)
            col3.metric("‚åÄ W√∂rter/Eintrag", f"{avg_words:.0f}")
            col4.metric("L√§ngster Eintrag", max([entry.get('word_count', 0) for entry in st.session_state.diary_entries]) if st.session_state.diary_entries else 0)
            
        else:
            st.info("üìä Noch keine Daten f√ºr Analysen. Schreib ein paar Eintr√§ge und komm zur√ºck!")
    
    with tab4:
        st.markdown("### üîç Pers√∂nliche Insights")
        
        if len(st.session_state.diary_entries) >= 3:
            # Generiere Insights basierend auf Eintr√§gen
            recent_entries = st.session_state.diary_entries[-5:]
            
            st.markdown("**üéØ Deine letzten Patterns:**")
            
            # H√§ufigste Kategorien
            recent_categories = [entry.get('category', 'Unbekannt') for entry in recent_entries]
            most_common_category = max(set(recent_categories), key=recent_categories.count) if recent_categories else None
            
            if most_common_category:
                st.info(f"üîç **Aktueller Fokus:** Du besch√§ftigst dich oft mit '{most_common_category}'. Das zeigt, was gerade wichtig f√ºr dich ist.")
            
            # Schreibh√§ufigkeit
            if len(st.session_state.diary_entries) >= 7:
                st.success("üî• **Schreib-Streak:** Du bist dabei, eine richtige Routine zu entwickeln! Das ist gro√üartig f√ºr deine Selbstreflexion.")
            
            # Wort-Trends
            recent_word_counts = [entry.get('word_count', 0) for entry in recent_entries]
            if recent_word_counts:
                avg_recent = sum(recent_word_counts) / len(recent_word_counts)
                if avg_recent > 50:
                    st.info("‚úçÔ∏è **Detailfreude:** Du schreibst ausf√ºhrlich - das zeigt tiefe Reflexion!")
                else:
                    st.info("üìù **Pr√§gnant:** Kurz und knackig - manchmal sagt weniger mehr!")
            
            # Motivierende Nachricht
            encouragements = [
                "Du machst das gro√üartig! Jeder Eintrag ist ein Schritt zur Selbsterkenntnis.",
                "Deine Ehrlichkeit dir selbst gegen√ºber ist beeindruckend.",
                "Das regelm√§√üige Schreiben zeigt, dass du dir selbst wichtig bist.",
                "Deine Reflexionsf√§higkeit entwickelt sich mit jedem Eintrag weiter.",
                "Du baust dir hier ein wertvolles Archiv deiner pers√∂nlichen Entwicklung auf."
            ]
            
            st.markdown(f"""
            <div class="quote-box">
                <h4>üí´ Message f√ºr dich:</h4>
                <p>{random.choice(encouragements)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        else:
            st.markdown("""
            <div style="text-align: center; padding: 2em;">
                <h3>üå± Deine Insight-Reise beginnt hier</h3>
                <p>Schreib mindestens 3 Eintr√§ge, um personalisierte Einblicke zu erhalten!</p>
                <p>Jeder Eintrag hilft der App, deine Muster und Entwicklung besser zu verstehen.</p>
            </div>
            """, unsafe_allow_html=True)

def handle_humor_module():
    """Erweiterter Galgenhumor-Modus mit mehr Interaktivit√§t"""
    
    tab1, tab2, tab3 = st.tabs(["üé≤ Zufallsweisheiten", "üé≠ Interaktiver Humor", "üìù Humor-Tagebuch"])
    
    with tab1:
        st.markdown("### üòÖ Digitale Weisheiten f√ºr die Seele")
        
        humor_categories = {
            "üî• Sarkastisch": [
                "Sch√∂n, dass du es heute geschafft hast, nicht komplett durchzudrehen. Fortschritt ist relativ.",
                "Deine Probleme sind einzigartig - genau wie die von 8 Milliarden anderen Menschen.",
                "Wartezeit ist Therapie-Zeit! Du √ºbst schon mal das Warten auf Besserung.",
                "Vergiss nicht: Auch Sisyphos hatte schlechte Tage. Aber er hatte wenigstens einen Stein.",
                "Deine Selbstzweifel sind berechtigt - das ist schon mal ein Fortschritt in der Selbstwahrnehmung.",
                "Perfektionismus ist der Versuch, den unm√∂glichen Standard zu erreichen, den niemand verlangt hat.",
                "Du bist nicht verr√ºckt. Die Welt ist es. Du bemerkst es nur als einer der wenigen."
            ],
            "üí™ Motivational (aber ehrlich)": [
                "Du bist st√§rker als du denkst. Wahrscheinlich. Vielleicht. Hoffen wir es mal.",
                "Heute ist ein neuer Tag voller neuer M√∂glichkeiten... zu versagen. Aber auch zu wachsen!",
                "Remember: Even professional therapists need therapy. Du bist in guter Gesellschaft.",
                "Jeder Schritt z√§hlt, auch wenn er r√ºckw√§rts ist - du bewegst dich wenigstens.",
                "Du machst das Beste aus deiner Situation. Dass das nicht viel ist, ist nicht deine Schuld.",
                "Authentizit√§t bedeutet, ehrlich √ºber dein Chaos zu sein. Du bist sehr authentisch!",
                "Du √ºberlebst 100% deiner schlechtesten Tage. Das ist eine beeindruckende Erfolgsquote."
            ],
            "ü§î Philosophisch absurd": [
                "Wenn ein Therapeut in der Therapie weint und niemand da ist, ist es dann trotzdem therapeutisch?",
                "Die Definition von Wahnsinn ist, immer wieder dasselbe zu tun und andere Ergebnisse zu erwarten. Also ist normalit√§t auch nicht besser.",
                "Existenzangst ist nur ein Zeichen daf√ºr, dass du existierst. Herzlichen Gl√ºckwunsch!",
                "In einer verr√ºckten Welt ist Anpassung das eigentliche Problem.",
                "Deine Neurosen sind Features, keine Bugs. Du bist eine sehr interessante Beta-Version.",
                "Das Leben ist absurd. Aber hey, wenigstens ist es konsistent absurd."
            ],
            "üè• Therapie-Insider": [
                "Dein Therapeut googelt auch erstmal deine Symptome. Ihr seid quitt.",
                "50 Minuten Therapie, 10 Minuten Notizen: 'Patient lebt noch. Fortschritt unklar.'",
                "Therapie ist bezahlte Freundschaft mit professioneller Schweigepflicht.",
                "Dein Therapeut denkt auch manchmal 'Was zur H√∂lle mache ich hier?'",
                "Die beste Therapie ist oft einfach jemand, der zuh√∂rt, ohne sofort L√∂sungen anzubieten.",
                "Therapieerfolg wird daran gemessen, dass du deine Probleme besser ertr√§gst, nicht dass sie verschwinden."
            ]
        }
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            selected_category = st.selectbox(
                "W√§hle deinen Humor-Style:",
                list(humor_categories.keys())
            )
            
            mood_modifier = st.slider(
                "Sarkasmus-Level:",
                1, 10, 5,
                help="1 = Sanft ironisch, 10 = Brutal ehrlich"
            )
        
        with col2:
            if st.button("üé≤ Neue Weisheit generieren", type="primary"):
                quotes = humor_categories[selected_category]
                selected_quote = random.choice(quotes)
                
                # Modifiziere Quote basierend auf Sarkasmus-Level
                if mood_modifier <= 3:
                    prefix = "üíù Sanfte Erinnerung: "
                elif mood_modifier <= 7:
                    prefix = "üí≠ Kleine Wahrheit: "
                else:
                    prefix = "üî• Harte Realit√§t: "
                
                st.markdown(f"""
                <div class="quote-box" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                    <h4>{prefix}</h4>
                    <p style="font-size: 1.2em; margin: 1em 0;">"{selected_quote}"</p>
                    <div style="text-align: right; opacity: 0.8;">
                        ‚Äî Dein digitaler Seelen-Klempner<br>
                        <small>Sarkasmus-Level: {mood_modifier}/10</small>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Bonus-Features basierend auf Level
                if mood_modifier >= 8:
                    st.warning("‚ö†Ô∏è Das war jetzt ziemlich direkt. Brauchst du eine virtuelle Umarmung? ü§ó")
                elif mood_modifier <= 2:
                    st.info("üå∏ Das war jetzt sehr sanft. Du bist heute in liebevoller Stimmung!")
            
            # T√§gliches Spezial
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            if st.button("üìÖ Weisheit des Tages"):
                daily_specials = [
                    "Montag: 'Wer hat entschieden, dass Montage existieren m√ºssen?'",
                    "Dienstag: 'Dienstag ist der Beweis, dass auch die Woche ein Trauma hat.'",
                    "Mittwoch: 'Bergfest! Du hast die H√§lfte der Woche √ºberlebt!'",
                    "Donnerstag: 'Donnerstag - fast Freitag, aber noch nicht Freitag. Ein metaphysisches Dilemma.'",
                    "Freitag: 'TGIF - Thank God It's Finally... oh wait, morgen ist Samstag. Arbeitsfreie Zeit ist auch stressig.'",
                    "Samstag: 'Samstag: Der Tag, an dem du merkst, dass Freizeit auch Verantwortung ist.'",
                    "Sonntag: 'Sunday Scaries sind real. Morgen ist wieder Montag. Der Kreislauf beginnt von vorn.'"
                ]
                
                weekday = datetime.datetime.now().weekday()
                daily_quote = daily_specials[weekday]
                
                st.success(f"üåÖ **{daily_quote}**")
    
    with tab2:
        st.markdown("### üé≠ Interaktiver Sarkasmus-Generator")
        
        # Situation eingeben
        situation = st.text_input(
            "Beschreib deine aktuelle Situation:",
            placeholder="z.B. 'Mein Chef nervt', 'Ich bin m√ºde', 'Alles ist zu viel'"
        )
        
        if situation and st.button("üéØ Ma√ügeschneiderten Kommentar generieren"):
            # Intelligente Antworten basierend auf Keywords
            responses = {
                "chef": [
                    f"Ah, {situation}? Schockierend! Ein Chef, der nervt. Das ist ja noch nie dagewesen.",
                    f"'{situation}' - Vielleicht ist dein Chef auch nur ein Mensch mit eigenen Problemen. Aber heute nervt er trotzdem.",
                    f"Pro-Tipp: Stell dir vor, dein Chef ist ein NPCs in deinem Lebensspiel. Macht ihn weniger real, aber nicht weniger nervig."
                ],
                "m√ºde": [
                    f"'{situation}' - Join the club! M√ºdigkeit ist der neue Normalzustand der Menschheit.",
                    f"M√ºde sein ist ein Zeichen daf√ºr, dass du lebst und arbeitest. Oder einfach existierst. Das reicht schon.",
                    f"Fun Fact: Auch Kaffee wird irgendwann m√ºde. Du bist in guter Gesellschaft."
                ],
                "viel": [
                    f"'{situation}' - Das Leben hat vergessen, dass du nur ein Mensch bist, kein Superheld.",
                    f"Zu viel ist das neue Normal. Willkommen in der √úberforderungs-Gesellschaft!",
                    f"Plot Twist: 'Zu viel' ist subjektiv. F√ºr eine Ameise w√§re dein Tag unm√∂glich."
                ],
                "default": [
                    f"'{situation}' - Klingt herausfordernd! Aber hey, du bist hier und beschreibst es. Das ist schon was.",
                    f"'{situation}' - Manchmal ist das Leben wie ein schlechter Film, nur dass du nicht gehen kannst.",
                    f"'{situation}' - Das klingt nach einem typischen Menschlichkeits-Problem. Du bist sehr menschlich!"
                ]
            }
            
            # Finde passende Kategorie
            situation_lower = situation.lower()
            if any(word in situation_lower for word in ["chef", "boss", "arbeit", "job"]):
                category_responses = responses["chef"]
            elif any(word in situation_lower for word in ["m√ºde", "ersch√∂pft", "schlaf"]):
                category_responses = responses["m√ºde"]
            elif any(word in situation_lower for word in ["viel", "stress", "√ºberfordert", "chaos"]):
                category_responses = responses["viel"]
            else:
                category_responses = responses["default"]
            
            response = random.choice(category_responses)
            
            st.markdown(f"""
            <div class="quote-box">
                <h4>üéØ Ma√ügeschneiderter Kommentar:</h4>
                <p style="font-size: 1.1em;">"{response}"</p>
                <small>‚Äî Dein pers√∂nlicher Sarkasmus-Assistent</small>
            </div>
            """, unsafe_allow_html=True)
        
        # Humor-Tools
        st.markdown("---")
        st.markdown("### üõ†Ô∏è Humor-Werkzeugkasten")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîÑ Perspektiv-Wechsel"):
                perspectives = [
                    "Stell dir vor, ein Alien w√ºrde deine Situation beobachten. Was w√ºrde es denken?",
                    "In 10 Jahren ist das hier eine lustige Anekdote. Wahrscheinlich.",
                    "Irgendwo auf der Welt hat jemand das gleiche Problem. Ihr seid Problem-Twins!",
                    "Das ist Material f√ºr deine zuk√ºnftige Stand-up-Comedy-Karriere.",
                    "Mindestens bist du nicht in einem Reality-TV-Format gefangen."
                ]
                st.info(random.choice(perspectives))
        
        with col2:
            if st.button("üé™ Absurdit√§ts-Check"):
                absurd_facts = [
                    "Fakt: Wombats haben w√ºrfelf√∂rmigen Kot. Dein Problem ist also nicht das Absurdeste heute.",
                    "Irgendwo macht jemand gerade Musik mit Gem√ºse. Deine Sorgen sind relativ normal.",
                    "Es gibt Menschen, die professionell Pandas zum Schlafen bringen. Dein Job ist ok.",
                    "Jemand hat mal versucht, Ketchup als Medizin zu verkaufen. Deine Ideen sind nicht die schlechtesten.",
                    "Es gibt ein Wort f√ºr die Angst vor Clowns, aber keins f√ºr Montagsmorgen. Priorit√§ten..."
                ]
                st.success(random.choice(absurd_facts))
        
        with col3:
            if st.button("üí´ Instant-Aufmunterung"):
                uplifting = [
                    "Du atmest noch. Das ist statistisch gesehen ein sehr gutes Zeichen!",
                    "Du hast heute schon mehr geschafft als ein Koala. Die schlafen 22h am Tag.",
                    "Deine Probleme zeigen, dass du ein Leben hast. Gl√ºckwunsch zur Existenz!",
                    "Du bist der Hauptcharakter in deiner Geschichte. Auch wenn's gerade ein Drama ist.",
                    "Du hast bis jetzt 100% deiner schlechten Tage √ºberlebt. Beeindruckende Bilanz!"
                ]
                st.balloons()
                st.success(random.choice(uplifting))
    
    with tab3:
        st.markdown("### üìù Dein pers√∂nliches Humor-Archiv")
        
        if "humor_entries" not in st.session_state:
            st.session_state.humor_entries = []
        
        # Neuen Humor-Moment hinzuf√ºgen
        st.markdown("**Was war heute absurd, ironisch oder einfach zum Lachen?**")
        
        humor_text = st.text_area(
            "Beschreib die Situation:",
            placeholder="z.B. 'Bin ausgerutscht, aber elegant gelandet' oder 'Chef hat sich selbst widersprochen - in einem Satz'"
        )
        
        humor_rating = st.slider("Wie lustig war es? (1-10)", 1, 10, 5)
        
        if st.button("üòÑ Humor-Moment speichern") and humor_text:
            humor_entry = {
                "date": datetime.datetime.now().isoformat(),
                "text": humor_text,
                "rating": humor_rating,
                "id": len(st.session_state.humor_entries) + 1
            }
            st.session_state.humor_entries.append(humor_entry)
            st.success("üòÇ Humor-Moment gespeichert! Lachen ist die beste Medizin (angeblich).")
        
        # Humor-Archiv anzeigen
        if st.session_state.humor_entries:
            st.markdown("---")
            st.markdown("**üé≠ Deine gesammelten Lacher:**")
            
            for entry in reversed(st.session_state.humor_entries[-5:]):
                date_str = datetime.datetime.fromisoformat(entry["date"]).strftime("%d.%m.%Y")
                stars = "‚≠ê" * entry["rating"]
                
                st.markdown(f"""
                <div class="diary-entry">
                    <strong>{date_str}</strong> | {stars}<br>
                    <em>"{entry['text']}"</em>
                </div>
                """, unsafe_allow_html=True)

def handle_game_module():
    """Erweiterte Gamification mit mehr Spielelementen"""
    
    tab1, tab2, tab3, tab4 = st.tabs(["üéÆ Daily Challenges", "üèÜ Achievements", "üìä Stats & Level", "üéØ Custom Goals"])
    
    with tab1:
        st.markdown("### üéÆ Existenzkrise: Das Spiel")
        st.markdown("*Level up deine mentale Gesundheit mit Style!*")
        
        # Aktueller Score und Level
        level = st.session_state.game_score // 100 + 1
        progress_in_level = st.session_state.game_score % 100
        next_level_points = 100 - progress_in_level
        
        col1, col2, col3 = st.columns(3)
        col1.metric("üéØ Aktuelle Punkte", st.session_state.game_score)
        col2.metric("‚≠ê Level", level)
        col3.metric("üìà Bis n√§chstes Level", next_level_points)
        
        # Level Progress Bar
        st.markdown(f"""
        <div class="progress-container">
            <div class="progress-bar" style="width: {progress_in_level}%"></div>
        </div>
        <p style="text-align: center; margin-top: 0.5em;">Level {level} Progress: {progress_in_level}/100</p>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # T√§gliche Challenges (verschiedene Schwierigkeitsgrade)
        st.markdown("### üåü Heute verf√ºgbare Missionen")
        
        challenges = {
            "Anf√§nger": [
                {"text": "Steh auf, ohne den Wecker zu verfluchen", "points": 10, "icon": "üåÖ"},
                {"text": "Trink ein Glas Wasser (nicht nur Kaffee)", "points": 10, "icon": "üíß"},
                {"text": "Mach das Bett (oder tu wenigstens so)", "points": 15, "icon": "üõèÔ∏è"},
                {"text": "Sag 'Danke' zu jemandem", "points": 15, "icon": "üôè"}
            ],
            "Fortgeschritten": [
                {"text": "Geh 15 Minuten spazieren (auch im Haus z√§hlt)", "points": 25, "icon": "üö∂"},
                {"text": "Ruf einen Freund an (nicht f√ºr eine Krise)", "points": 30, "icon": "üìû"},
                {"text": "Mach etwas, was du aufgeschoben hast", "points": 35, "icon": "‚úÖ"},
                {"text": "Meditiere 5 Minuten (oder starr 5 Min an die Wand)", "points": 25, "icon": "üßò"}
            ],
            "Experte": [
                {"text": "Geh vor 23 Uhr ins Bett", "points": 40, "icon": "üåô"},
                {"text": "Koche etwas Gesundes (Instant-Nudeln z√§hlen nicht)", "points": 45, "icon": "üë®‚Äçüç≥"},
                {"text": "Mach Sport (auch 5 Liegest√ºtze z√§hlen)", "points": 50, "icon": "üí™"},
                {"text": "Schreib jemandem eine nette Nachricht", "points": 35, "icon": "üíå"}
            ],
            "Legendary": [
                {"text": "Einen ganzen Tag ohne Social Media", "points": 100, "icon": "üì±‚ùå"},
                {"text": "L√∂se ein Problem, das du Wochen aufgeschoben hast", "points": 80, "icon": "üéØ"},
                {"text": "Plane aktiv etwas Sch√∂nes f√ºr n√§chste Woche", "points": 60, "icon": "üìÖ"},
                {"text": "Hilf jemandem ohne dass er danach fragt", "points": 70, "icon": "ü§ù"}
            ]
        }
        
        for difficulty, challenge_list in challenges.items():
            with st.expander(f"üé≤ {difficulty}-Missionen", expanded=(difficulty == "Anf√§nger")):
                
                challenge = random.choice(challenge_list)
                
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.markdown(f"""
                    <div style="background: rgba(255,255,255,0.1); padding: 1em; border-radius: 10px; margin: 0.5em 0;">
                        <h4>{challenge['icon']} {challenge['text']}</h4>
                        <p>Belohnung: <strong>{challenge['points']} Punkte</strong></p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    if st.button("‚úÖ Geschafft!", key=f"{difficulty}_success"):
                        st.session_state.game_score += challenge["points"]
                        
                        # Level-up Check
                        new_level = st.session_state.game_score // 100 + 1
                        if new_level > level:
                            st.balloons()
                            st.success(f"üéâ LEVEL UP! Du bist jetzt Level {new_level}!")
                        else:
                            st.success(f"üåü +{challenge['points']} Punkte! Gut gemacht!")
                        
                        # Achievement Check
                        if st.session_state.game_score >= 500 and "high_scorer" not in st.session_state:
                            st.session_state.high_scorer = True
                            st.success("üèÜ ACHIEVEMENT UNLOCKED: High Scorer!")
                    
                    if st.button("‚ùå Nicht heute", key=f"{difficulty}_fail"):
                        encouraging_messages = [
                            "Auch okay! Morgen ist ein neuer Tag zum Versagen... √§h, Versuchen!",
                            "Kein Problem! Selbsterkenntnis ist auch eine Art von Fortschritt.",
                            "Ehrlichkeit ist die beste Politik. Auch gegen√ºber dir selbst!",
                            "Das Leben ist kein Sprint. Manchmal ist es ein sehr langsamer Spaziergang.",
                            "Du hast immerhin die Ehrlichkeit aufgebracht, 'Nein' zu sagen!"
                        ]
                        st.info(random.choice(encouraging_messages))
    
    with tab2:
        st.markdown("### üèÜ Achievement-System")
        st.markdown("*Sammle Abzeichen f√ºr deine Lebens-Skills!*")
        
        # Initialize achievements if not present
        if "achievements" not in st.session_state:
            st.session_state.achievements = set()
        
        achievements_list = {
            "first_points": {"name": "First Steps", "desc": "Erste Punkte gesammelt", "icon": "üå±", "requirement": "score >= 10"},
            "consistent": {"name": "Routine Builder", "desc": "5 Challenges geschafft", "icon": "üîÑ", "requirement": "score >= 50"},
            "high_scorer": {"name": "High Achiever", "desc": "500 Punkte erreicht", "icon": "‚≠ê", "requirement": "score >= 500"},
            "level_5": {"name": "Veteran", "desc": "Level 5 erreicht", "icon": "üéñÔ∏è", "requirement": "score >= 400"},
            "diary_writer": {"name": "Soul Writer", "desc": "10 Tagebuch-Eintr√§ge", "icon": "üìö", "requirement": "diary >= 10"},
            "mood_tracker": {"name": "Emotion Explorer", "desc": "Verschiedene Stimmungen erfasst", "icon": "üé≠", "requirement": "moods >= 5"}
        }
        
        # Check and award achievements
        current_score = st.session_state.game_score
        diary_count = len(st.session_state.diary_entries)
        
        earned_count = 0
        total_count = len(achievements_list)
        
        col1, col2 = st.columns(2)
        
        for achievement_id, achievement in achievements_list.items():
            earned = False
            
            # Check requirements
            if "score >= 10" in achievement["requirement"] and current_score >= 10:
                earned = True
            elif "score >= 50" in achievement["requirement"] and current_score >= 50:
                earned = True
            elif "score >= 500" in achievement["requirement"] and current_score >= 500:
                earned = True
            elif "score >= 400" in achievement["requirement"] and current_score >= 400:
                earned = True
            elif "diary >= 10" in achievement["requirement"] and diary_count >= 10:
                earned = True
            elif "moods >= 5" in achievement["requirement"] and len(set([entry.get('mood', '') for entry in st.session_state.diary_entries])) >= 5:
                earned = True
            
            if earned:
                st.session_state.achievements.add(achievement_id)
                earned_count += 1
            
            # Display achievement
            with col1 if len(achievements_list) % 2 == 0 or achievement_id in list(achievements_list.keys())[::2] else col2:
                if earned:
                    st.markdown(f"""
                    <div style="background: linear-gradient(135deg, #4ecdc4, #44a08d); color: white; padding: 1em; border-radius: 10px; margin: 0.5em 0;">
                        <h4>{achievement['icon']} {achievement['name']} ‚úÖ</h4>
                        <p>{achievement['desc']}</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div style="background: rgba(0,0,0,0.1); padding: 1em; border-radius: 10px; margin: 0.5em 0; opacity: 0.6;">
                        <h4>üîí {achievement['name']}</h4>
                        <p>{achievement['desc']}</p>
                    </div>
                    """, unsafe_allow_html=True)
        
        # Achievement Summary
        st.markdown(f"""
        <div style="text-align: center; margin: 2em 0; padding: 1em; background: rgba(255,255,255,0.1); border-radius: 15px;">
            <h3>üéØ Achievement Progress</h3>
            <p><strong>{earned_count}/{total_count}</strong> Achievements unlocked</p>
            <div class="progress-container">
                <div class="progress-bar" style="width: {(earned_count/total_count)*100}%"></div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with tab3:
        st.markdown("### üìä Deine Gaming-Statistiken")
        
        # Hauptstatistiken
        col1, col2, col3, col4 = st.columns(4)
        
        col1.metric("üéØ Gesamtpunkte", st.session_state.game_score)
        col2.metric("‚≠ê Aktuelles Level", st.session_state.game_score // 100 + 1)
        col3.metric("üèÜ Achievements", len(st.session_state.achievements))
        col4.metric("üìù Diary Entries", len(st.session_state.diary_entries))
        
        # Fortschritts-Visualisierung
        st.markdown("---")
        st.markdown("### üìà Fortschritts-√úbersicht")
        
        # Simulierte Fortschrittsdaten (in echter App w√ºrde man das tracken)
        if st.session_state.game_score > 0:
            weeks = ["KW 1", "KW 2", "KW 3", "KW 4"]
            points_per_week = [
                min(st.session_state.game_score * 0.2, 50),
                min(st.session_state.game_score * 0.3, 80),
                min(st.session_state.game_score * 0.3, 100),
                min(st.session_state.game_score * 0.2, 120)
            ]
            
            st.markdown("**üìä Punkteentwicklung (simuliert):**")
            for week, points in zip(weeks, points_per_week):
                st.markdown(f"**{week}:** {points:.0f} Punkte")
                st.progress(points / 150)
        
        # Pers√∂nliche Bestleistungen
        st.markdown("---")
        st.markdown("### üåü Deine Bestleistungen")
        
        personal_bests = {
            "L√§ngste Schreibsession": f"{max([len(entry.get('text', '').split()) for entry in st.session_state.diary_entries], default=0)} W√∂rter",
            "H√∂chste Tagespunkte": "50 Punkte",  # W√ºrde man tracken
            "L√§ngste Streak": "3 Tage in Folge",  # W√ºrde man tracken
            "Lieblings-Kategorie": max([entry.get('category', 'Unbekannt') for entry in st.session_state.diary_entries], key=[entry.get('category', 'Unbekannt') for entry in st.session_state.diary_entries].count, default="Noch keine Daten")
        }
        
        for title, value in personal_bests.items():
            st.markdown(f"**{title}:** {value}")
    
    with tab4:
        st.markdown("### üéØ Personalisierte Ziele")
        st.markdown("*Erstelle deine eigenen Challenges!*")
        
        # Goal Creation
        if "custom_goals" not in st.session_state:
            st.session_state.custom_goals = []
        
        st.markdown("**üé® Neues Ziel erstellen:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            goal_text = st.text_input("Beschreibe dein Ziel:", placeholder="z.B. 'Jeden Tag 10 Min lesen'")
            goal_points = st.slider("Punkte-Belohnung:", 10, 100, 25)
            goal_difficulty = st.selectbox("Schwierigkeit:", ["Leicht", "Mittel", "Schwer", "Extrem"])
        
        with col2:
            goal_deadline = st.date_input("Bis wann?", value=datetime.datetime.now() + datetime.timedelta(days=7))
            goal_category = st.selectbox("Kategorie:", ["üí™ Gesundheit", "üß† Lernen", "‚ù§Ô∏è Beziehungen", "üé® Kreativit√§t", "üè† Haushalt", "üíº Arbeit"])
            reminder_frequency = st.selectbox("Erinnerung:", ["T√§glich", "W√∂chentlich", "Einmalig"])
        
        if st.button("üéØ Ziel erstellen") and goal_text:
            new_goal = {
                "id": len(st.session_state.custom_goals) + 1,
                "text": goal_text,
                "points": goal_points,
                "difficulty": goal_difficulty,
                "deadline": goal_deadline.isoformat(),
                "category": goal_category,
                "reminder": reminder_frequency,
                "completed": False,
                "created": datetime.datetime.now().isoformat()
            }
            st.session_state.custom_goals.append(new_goal)
            st.success(f"üéØ Ziel '{goal_text}' erstellt! Viel Erfolg!")
        
        # Display active goals
        if st.session_state.custom_goals:
            st.markdown("---")
            st.markdown("### üìã Deine aktiven Ziele")
            
            active_goals = [goal for goal in st.session_state.custom_goals if not goal["completed"]]
            completed_goals = [goal for goal in st.session_state.custom_goals if goal["completed"]]
            
            for goal in active_goals:
                deadline = datetime.datetime.fromisoformat(goal["deadline"])
                days_left = (deadline - datetime.datetime.now()).days
                
                urgency_color = "#ff6b6b" if days_left <= 1 else "#feca57" if days_left <= 3 else "#48cae4"
                
                st.markdown(f"""
                <div style="background: {urgency_color}; color: white; padding: 1em; border-radius: 10px; margin: 0.5em 0;">
                    <h4>{goal['category']} {goal['text']}</h4>
                    <p>Belohnung: {goal['points']} Punkte | Schwierigkeit: {goal['difficulty']}</p>
                    <p>‚è∞ Noch {days_left} Tag(e) | Reminder: {goal['reminder']}</p>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button(f"‚úÖ Ziel erreicht!", key=f"complete_{goal['id']}"):
                        goal["completed"] = True
                        st.session_state.game_score += goal["points"]
                        st.balloons()
                        st.success(f"üéâ Gl√ºckwunsch! +{goal['points']} Punkte f√ºr '{goal['text']}'!")
                        st.rerun()
                
                with col2:
                    if st.button(f"üóëÔ∏è Ziel l√∂schen", key=f"delete_{goal['id']}"):
                        st.session_state.custom_goals = [g for g in st.session_state.custom_goals if g["id"] != goal["id"]]
                        st.info("Ziel gel√∂scht. Manchmal √§ndern sich Priorit√§ten!")
                        st.rerun()
            
            # Completed goals
            if completed_goals:
                st.markdown("### ‚úÖ Erreichte Ziele")
                for goal in completed_goals[-5:]:  # Zeige die letzten 5
                    st.markdown(f"‚úÖ {goal['category']} {goal['text']} (+{goal['points']} Punkte)")

def handle_emotions_module():
    """Erweiterte Emotions-Regulation"""
    
    tab1, tab2, tab3, tab4 = st.tabs(["üå°Ô∏è Gef√ºhls-Check", "üé® Emotion-Mapping", "üßò Regulation-Tools", "üìä Emotion-History"])
    
    with tab1:
        st.markdown("### üíô Wie geht es dir gerade wirklich?")
        st.markdown("*Sei ehrlich - hier wird nicht geurteilt!*")
        
        # Erweiterte Emotionsauswahl
        emotion_categories = {
            "üò¢ Traurig": {
                "subcategories": ["Melancholisch", "Traurig", "Deprimiert", "Hoffnungslos", "Leer"],
                "color": "#74b9ff"
            },
            "üò∞ √Ñngstlich": {
                "subcategories": ["Nerv√∂s", "Besorgt", "Panisch", "Unsicher", "√úberw√§ltigt"],
                "color": "#fd79a8"
            },
            "üò° W√ºtend": {
                "subcategories": ["Genervt", "Frustriert", "Zornig", "Verbittert", "Emp√∂rt"],
                "color": "#e17055"
            },
            "üò¥ M√ºde": {
                "subcategories": ["Ersch√∂pft", "Ausgelaugt", "Energielos", "Burnt-out", "M√ºde"],
                "color": "#a29bfe"
            },
            "ü§ó Einsam": {
                "subcategories": ["Isoliert", "Unverstanden", "Verlassen", "Sehns√ºchtig", "Distanziert"],
                "color": "#00cec9"
            },
            "üòñ √úberfordert": {
                "subcategories": ["Gestresst", "Unter Druck", "Chaotisch", "Verloren", "Hilflos"],
                "color": "#fdcb6e"
            },
            "üòå Ruhig": {
                "subcategories": ["Entspannt", "Friedlich", "Gelassen", "Ausgeglichen", "Zentiert"],
                "color": "#00b894"
            },
            "‚ú® Positiv": {
                "subcategories": ["Hoffnungsvoll", "Dankbar", "Motiviert", "Gl√ºcklich", "Euphorisch"],
                "color": "#ffeaa7"
            }
        }
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("**üéØ Hauptemotion w√§hlen:**")
            selected_main_emotion = None
            
            for emotion, data in emotion_categories.items():
                if st.button(emotion, key=f"main_{emotion}"):
                    selected_main_emotion = emotion
                    st.session_state.selected_emotion_data = data
                    st.session_state.selected_main_emotion = emotion
        
        with col2:
            if hasattr(st.session_state, 'selected_emotion_data'):
                data = st.session_state.selected_emotion_data
                main_emotion = st.session_state.selected_main_emotion
                
                st.markdown(f"**üé® Nuancen von {main_emotion}:**")
                selected_subcategory = st.selectbox(
                    "Genauer gesagt f√ºhlst du dich:",
                    data["subcategories"],
                    key="emotion_subcategory"
                )
                
                intensity = st.slider(
                    "Wie stark? (1-10)",
                    1, 10, 5,
                    help="1 = kaum sp√ºrbar, 10 = √ºberw√§ltigend"
                )
                
                # Visualisierung der Emotion
                st.markdown(f"""
                <div style="background: {data['color']}; color: white; padding: 2em; border-radius: 15px; text-align: center; margin: 1em 0;">
                    <h3>{main_emotion}</h3>
                    <h4>{selected_subcategory}</h4
